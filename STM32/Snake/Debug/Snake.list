
Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004c88  08004c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d80  08004d80  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d88  08004d88  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000068  08004dfc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08004dfc  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db03  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ae  00000000  00000000  0002dbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0002ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000856  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026735  00000000  00000000  000312ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eda8  00000000  00000000  00057a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dab43  00000000  00000000  000667ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000354c  00000000  00000000  001412f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0014483c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c70 	.word	0x08004c70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004c70 	.word	0x08004c70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_ZN7MAX7219C1EP19__SPI_HandleTypeDef>:
#include <MAX7219.h>

MAX7219::MAX7219(SPI_HandleTypeDef *hspi_arg)
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
{
	hspi = hspi_arg;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	609a      	str	r2, [r3, #8]
}
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_ZN7MAX72194initEv>:

void MAX7219::init()
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
	sendData(decodeMode_reg_addr, decodeMode_reg_config);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2109      	movs	r1, #9
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f852 	bl	8000680 <_ZN7MAX72198sendDataEhh>
	sendData(intensity_reg_addr, intensity_reg_config);
 80005dc:	2202      	movs	r2, #2
 80005de:	210a      	movs	r1, #10
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 f84d 	bl	8000680 <_ZN7MAX72198sendDataEhh>
	sendData(scanLimit_reg_addr, scanLimit_reg_config);
 80005e6:	2207      	movs	r2, #7
 80005e8:	210b      	movs	r1, #11
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 f848 	bl	8000680 <_ZN7MAX72198sendDataEhh>
	sendData(shutdown_reg_addr, shutdown_reg_config);
 80005f0:	2201      	movs	r2, #1
 80005f2:	210c      	movs	r1, #12
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f843 	bl	8000680 <_ZN7MAX72198sendDataEhh>
	sendData(displayTest_reg_addr, displayTest_reg_config);
 80005fa:	2200      	movs	r2, #0
 80005fc:	210f      	movs	r1, #15
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f83e 	bl	8000680 <_ZN7MAX72198sendDataEhh>
	clear(); // Turn all LEDs off
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f805 	bl	8000614 <_ZN7MAX72195clearEv>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <_ZN7MAX72195clearEv>:

void MAX7219::clear()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=1; i<=8; i++){
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	e024      	b.n	800066c <_ZN7MAX72195clearEv+0x58>
		buffer[i-1] = 0;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	3b01      	subs	r3, #1
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	2100      	movs	r1, #0
 800062a:	54d1      	strb	r1, [r2, r3]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <_ZN7MAX72195clearEv+0x68>)
 8000632:	f001 fea5 	bl	8002380 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, &i, 1, 100);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6898      	ldr	r0, [r3, #8]
 800063a:	f107 010f 	add.w	r1, r7, #15
 800063e:	2364      	movs	r3, #100	; 0x64
 8000640:	2201      	movs	r2, #1
 8000642:	f002 fd28 	bl	8003096 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(hspi, &buffer[i-1], 1, 100);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6898      	ldr	r0, [r3, #8]
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	3b01      	subs	r3, #1
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	18d1      	adds	r1, r2, r3
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	2201      	movs	r2, #1
 8000656:	f002 fd1e 	bl	8003096 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	4807      	ldr	r0, [pc, #28]	; (800067c <_ZN7MAX72195clearEv+0x68>)
 8000660:	f001 fe8e 	bl	8002380 <HAL_GPIO_WritePin>
	for (uint8_t i=1; i<=8; i++){
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	3301      	adds	r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	2b08      	cmp	r3, #8
 8000670:	d9d7      	bls.n	8000622 <_ZN7MAX72195clearEv+0xe>
	}
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40020400 	.word	0x40020400

08000680 <_ZN7MAX72198sendDataEhh>:

void MAX7219::sendData(uint8_t reg_addr, uint8_t data)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
 800068c:	4613      	mov	r3, r2
 800068e:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <_ZN7MAX72198sendDataEhh+0x48>)
 8000696:	f001 fe73 	bl	8002380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &reg_addr, 1, 100);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6898      	ldr	r0, [r3, #8]
 800069e:	1cf9      	adds	r1, r7, #3
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	2201      	movs	r2, #1
 80006a4:	f002 fcf7 	bl	8003096 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &data, 1, 100);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6898      	ldr	r0, [r3, #8]
 80006ac:	1cb9      	adds	r1, r7, #2
 80006ae:	2364      	movs	r3, #100	; 0x64
 80006b0:	2201      	movs	r2, #1
 80006b2:	f002 fcf0 	bl	8003096 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <_ZN7MAX72198sendDataEhh+0x48>)
 80006bc:	f001 fe60 	bl	8002380 <HAL_GPIO_WritePin>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020400 	.word	0x40020400

080006cc <_ZN7MAX72199switchLEDEhhh>:

void MAX7219::switchLED(uint8_t col, uint8_t row, uint8_t value)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	4608      	mov	r0, r1
 80006d6:	4611      	mov	r1, r2
 80006d8:	461a      	mov	r2, r3
 80006da:	4603      	mov	r3, r0
 80006dc:	70fb      	strb	r3, [r7, #3]
 80006de:	460b      	mov	r3, r1
 80006e0:	70bb      	strb	r3, [r7, #2]
 80006e2:	4613      	mov	r3, r2
 80006e4:	707b      	strb	r3, [r7, #1]
	//uint8_t col_temp = col + 1; // digit addresses start at 0x01
	switch(value){
 80006e6:	787b      	ldrb	r3, [r7, #1]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <_ZN7MAX72199switchLEDEhhh+0x26>
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d012      	beq.n	8000716 <_ZN7MAX72199switchLEDEhhh+0x4a>
		buffer[col] &= ~(1<<row);
		break;
	case 1:
		buffer[col] |= 1<<row;
		break;
	default: return;
 80006f0:	e02b      	b.n	800074a <_ZN7MAX72199switchLEDEhhh+0x7e>
		buffer[col] &= ~(1<<row);
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	5cd3      	ldrb	r3, [r2, r3]
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	78bb      	ldrb	r3, [r7, #2]
 80006fc:	2101      	movs	r1, #1
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	b25b      	sxtb	r3, r3
 8000704:	43db      	mvns	r3, r3
 8000706:	b25b      	sxtb	r3, r3
 8000708:	4013      	ands	r3, r2
 800070a:	b25a      	sxtb	r2, r3
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	b2d1      	uxtb	r1, r2
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	54d1      	strb	r1, [r2, r3]
		break;
 8000714:	e00f      	b.n	8000736 <_ZN7MAX72199switchLEDEhhh+0x6a>
		buffer[col] |= 1<<row;
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	5cd3      	ldrb	r3, [r2, r3]
 800071c:	b25a      	sxtb	r2, r3
 800071e:	78bb      	ldrb	r3, [r7, #2]
 8000720:	2101      	movs	r1, #1
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	b25b      	sxtb	r3, r3
 8000728:	4313      	orrs	r3, r2
 800072a:	b25a      	sxtb	r2, r3
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	b2d1      	uxtb	r1, r2
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	54d1      	strb	r1, [r2, r3]
		break;
 8000734:	bf00      	nop
	}
    sendData(col+1, buffer[col]);
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	3301      	adds	r3, #1
 800073a:	b2d9      	uxtb	r1, r3
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	5cd3      	ldrb	r3, [r2, r3]
 8000742:	461a      	mov	r2, r3
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff9b 	bl	8000680 <_ZN7MAX72198sendDataEhh>
}
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <_ZN5SnakeC1EP19__SPI_HandleTypeDefP20__UART_HandleTypeDef>:
#include <Snake_game.h>

Snake::Snake(SPI_HandleTypeDef *hspi_arg, UART_HandleTypeDef *huart_arg) : matrix(hspi_arg){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	338c      	adds	r3, #140	; 0x8c
 8000760:	68b9      	ldr	r1, [r7, #8]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff22 	bl	80005ac <_ZN7MAX7219C1EP19__SPI_HandleTypeDef>
	huart = huart_arg;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
};
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <_ZN5Snake4initEtht>:

void Snake::init(uint16_t screen_refresh_period_arg, uint8_t LED_intensity, uint16_t rand_number){
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	4608      	mov	r0, r1
 8000784:	4611      	mov	r1, r2
 8000786:	461a      	mov	r2, r3
 8000788:	4603      	mov	r3, r0
 800078a:	817b      	strh	r3, [r7, #10]
 800078c:	460b      	mov	r3, r1
 800078e:	727b      	strb	r3, [r7, #9]
 8000790:	4613      	mov	r3, r2
 8000792:	80fb      	strh	r3, [r7, #6]
    matrix.init();
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	338c      	adds	r3, #140	; 0x8c
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff16 	bl	80005ca <_ZN7MAX72194initEv>
    matrix.sendData(intensity_reg_addr, LED_intensity); // configure intensity
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	338c      	adds	r3, #140	; 0x8c
 80007a2:	7a7a      	ldrb	r2, [r7, #9]
 80007a4:	210a      	movs	r1, #10
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff6a 	bl	8000680 <_ZN7MAX72198sendDataEhh>
    srand(rand_number); // use analogRead 0'th port to set the seed for random number generator
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fa4a 	bl	8003c48 <srand>
    screen_refresh_period = screen_refresh_period_arg; // 200 ms = 5 Hz
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	897a      	ldrh	r2, [r7, #10]
 80007b8:	805a      	strh	r2, [r3, #2]
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_ZN5Snake4playEv>:

void Snake::play(){
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
    restart();
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f825 	bl	800081a <_ZN5Snake7restartEv>
    while(true){
        receive_movement_command();
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 f8f3 	bl	80009bc <_ZN5Snake24receive_movement_commandEv>
        move();
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f95c 	bl	8000a94 <_ZN5Snake4moveEv>
        if(check_for_collision() == 1) break;        
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f9dd 	bl	8000b9c <_ZN5Snake19check_for_collisionEv>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	bf0c      	ite	eq
 80007e8:	2301      	moveq	r3, #1
 80007ea:	2300      	movne	r3, #0
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d10b      	bne.n	800080a <_ZN5Snake4playEv+0x48>
        place_fruit();
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 f888 	bl	8000908 <_ZN5Snake11place_fruitEv>
        draw();
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f84a 	bl	8000892 <_ZN5Snake4drawEv>
        HAL_Delay(screen_refresh_period);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	885b      	ldrh	r3, [r3, #2]
 8000802:	4618      	mov	r0, r3
 8000804:	f000 ff0e 	bl	8001624 <HAL_Delay>
        receive_movement_command();
 8000808:	e7e2      	b.n	80007d0 <_ZN5Snake4playEv+0xe>
        if(check_for_collision() == 1) break;        
 800080a:	bf00      	nop
    }
    game_over();
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 fa2a 	bl	8000c66 <_ZN5Snake9game_overEv>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_ZN5Snake7restartEv>:
// Place snake, on restart the snake is 3 dots long and moves left
void Snake::restart(){
 800081a:	b580      	push	{r7, lr}
 800081c:	b084      	sub	sp, #16
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
    snake_len = 3;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2203      	movs	r2, #3
 8000826:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    x_velocity = -1; // move left
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	22ff      	movs	r2, #255	; 0xff
 800082e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    y_velocity = 0;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
    fruit_exists = 0;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2200      	movs	r2, #0
 800083e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
    // place snake
    for(int i=0;i<snake_len;i++){
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	e013      	b.n	8000870 <_ZN5Snake7restartEv+0x56>
		x_coord_snake[i] = i+4;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	3304      	adds	r3, #4
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b259      	sxtb	r1, r3
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	3304      	adds	r3, #4
 800085a:	460a      	mov	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
        y_coord_snake[i] = 4;
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	3344      	adds	r3, #68	; 0x44
 8000866:	2204      	movs	r2, #4
 8000868:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<snake_len;i++){
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3301      	adds	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4293      	cmp	r3, r2
 800087c:	dbe4      	blt.n	8000848 <_ZN5Snake7restartEv+0x2e>
    }
    place_fruit();
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f842 	bl	8000908 <_ZN5Snake11place_fruitEv>
    draw();
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 f804 	bl	8000892 <_ZN5Snake4drawEv>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <_ZN5Snake4drawEv>:
void Snake::draw(){
 8000892:	b580      	push	{r7, lr}
 8000894:	b084      	sub	sp, #16
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
    matrix.clear();
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	338c      	adds	r3, #140	; 0x8c
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff feb8 	bl	8000614 <_ZN7MAX72195clearEv>
    matrix.switchLED(x_coord_fruit, y_coord_fruit, 1); // draw fruit
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f893 1089 	ldrb.w	r1, [r3, #137]	; 0x89
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 80008b6:	2301      	movs	r3, #1
 80008b8:	f7ff ff08 	bl	80006cc <_ZN7MAX72199switchLEDEhhh>
    for(int i=0;i<snake_len;i++){
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	e016      	b.n	80008f0 <_ZN5Snake4drawEv+0x5e>
        matrix.switchLED(x_coord_snake[i], y_coord_snake[i], 1); // draw snake
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4413      	add	r3, r2
 80008ce:	3304      	adds	r3, #4
 80008d0:	f993 3000 	ldrsb.w	r3, [r3]
 80008d4:	b2d9      	uxtb	r1, r3
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	3344      	adds	r3, #68	; 0x44
 80008de:	f993 3000 	ldrsb.w	r3, [r3]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	2301      	movs	r3, #1
 80008e6:	f7ff fef1 	bl	80006cc <_ZN7MAX72199switchLEDEhhh>
    for(int i=0;i<snake_len;i++){
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3301      	adds	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4293      	cmp	r3, r2
 80008fc:	dbe1      	blt.n	80008c2 <_ZN5Snake4drawEv+0x30>
    }
}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <_ZN5Snake11place_fruitEv>:
void Snake::place_fruit(){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    while(fruit_exists == 0){
 8000910:	e049      	b.n	80009a6 <_ZN5Snake11place_fruitEv+0x9e>
        fruit_exists = 1;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        x_coord_fruit = rand() % 8; // generate a random number with value ranging from 0 to 7
 800091a:	f003 f9c3 	bl	8003ca4 <rand>
 800091e:	4603      	mov	r3, r0
 8000920:	425a      	negs	r2, r3
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	f002 0207 	and.w	r2, r2, #7
 800092a:	bf58      	it	pl
 800092c:	4253      	negpl	r3, r2
 800092e:	b2da      	uxtb	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        y_coord_fruit = rand() % 8;
 8000936:	f003 f9b5 	bl	8003ca4 <rand>
 800093a:	4603      	mov	r3, r0
 800093c:	425a      	negs	r2, r3
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	f002 0207 	and.w	r2, r2, #7
 8000946:	bf58      	it	pl
 8000948:	4253      	negpl	r3, r2
 800094a:	b2da      	uxtb	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        for(int i=0;i<snake_len;i++){
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e01f      	b.n	8000998 <_ZN5Snake11place_fruitEv+0x90>
            if((x_coord_snake[i] == x_coord_fruit) && (y_coord_snake[i] == y_coord_fruit)){
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	3304      	adds	r3, #4
 8000960:	f993 3000 	ldrsb.w	r3, [r3]
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800096c:	429a      	cmp	r2, r3
 800096e:	d110      	bne.n	8000992 <_ZN5Snake11place_fruitEv+0x8a>
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	4413      	add	r3, r2
 8000976:	3344      	adds	r3, #68	; 0x44
 8000978:	f993 3000 	ldrsb.w	r3, [r3]
 800097c:	461a      	mov	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8000984:	429a      	cmp	r2, r3
 8000986:	d104      	bne.n	8000992 <_ZN5Snake11place_fruitEv+0x8a>
                fruit_exists = 0;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8000990:	e009      	b.n	80009a6 <_ZN5Snake11place_fruitEv+0x9e>
        for(int i=0;i<snake_len;i++){
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3301      	adds	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4293      	cmp	r3, r2
 80009a4:	dbd8      	blt.n	8000958 <_ZN5Snake11place_fruitEv+0x50>
    while(fruit_exists == 0){
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0b0      	beq.n	8000912 <_ZN5Snake11place_fruitEv+0xa>
            }
        }
    }
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <_ZN5Snake24receive_movement_commandEv>:

uint8_t Snake::receive_movement_command(){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    uint8_t serial_data_in;
    uint8_t ret_value = HAL_UART_Receive(huart, &serial_data_in, 1, 10);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80009ca:	f107 010e 	add.w	r1, r7, #14
 80009ce:	230a      	movs	r3, #10
 80009d0:	2201      	movs	r2, #1
 80009d2:	f002 fdb4 	bl	800353e <HAL_UART_Receive>
 80009d6:	4603      	mov	r3, r0
 80009d8:	73fb      	strb	r3, [r7, #15]
	if (ret_value == HAL_OK){
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d154      	bne.n	8000a8a <_ZN5Snake24receive_movement_commandEv+0xce>
        // set snake movement direction
        switch(serial_data_in){
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	3b30      	subs	r3, #48	; 0x30
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d845      	bhi.n	8000a74 <_ZN5Snake24receive_movement_commandEv+0xb8>
 80009e8:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <_ZN5Snake24receive_movement_commandEv+0x34>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000a01 	.word	0x08000a01
 80009f4:	08000a1d 	.word	0x08000a1d
 80009f8:	08000a3b 	.word	0x08000a3b
 80009fc:	08000a57 	.word	0x08000a57
            case '0': // move up
                if(y_velocity != 1){ // restrict motion in the opposite direction
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f993 3087 	ldrsb.w	r3, [r3, #135]	; 0x87
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d036      	beq.n	8000a78 <_ZN5Snake24receive_movement_commandEv+0xbc>
                    x_velocity = 0; // (-1) - left, 0 - no motion, 1 - right
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                    y_velocity = -1; // (-1) - up, 0 - no motion, 1 - down
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	22ff      	movs	r2, #255	; 0xff
 8000a16:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
                }
                break;
 8000a1a:	e02d      	b.n	8000a78 <_ZN5Snake24receive_movement_commandEv+0xbc>
            case '1': // move down
                if(y_velocity != -1){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f993 3087 	ldrsb.w	r3, [r3, #135]	; 0x87
 8000a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a26:	d029      	beq.n	8000a7c <_ZN5Snake24receive_movement_commandEv+0xc0>
                    x_velocity = 0;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                    y_velocity = 1;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2201      	movs	r2, #1
 8000a34:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
                }
                break;
 8000a38:	e020      	b.n	8000a7c <_ZN5Snake24receive_movement_commandEv+0xc0>
            case '2': // move left
                if(x_velocity != 1){
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f993 3086 	ldrsb.w	r3, [r3, #134]	; 0x86
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d01d      	beq.n	8000a80 <_ZN5Snake24receive_movement_commandEv+0xc4>
                    x_velocity = -1;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                    y_velocity = 0;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
                }
                break;
 8000a54:	e014      	b.n	8000a80 <_ZN5Snake24receive_movement_commandEv+0xc4>
            case '3': // move down
                if(x_velocity != -1){
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f993 3086 	ldrsb.w	r3, [r3, #134]	; 0x86
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a60:	d010      	beq.n	8000a84 <_ZN5Snake24receive_movement_commandEv+0xc8>
                    x_velocity = 1;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2201      	movs	r2, #1
 8000a66:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                    y_velocity = 0;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
                }
                break;
 8000a72:	e007      	b.n	8000a84 <_ZN5Snake24receive_movement_commandEv+0xc8>
            default : break;
 8000a74:	bf00      	nop
 8000a76:	e006      	b.n	8000a86 <_ZN5Snake24receive_movement_commandEv+0xca>
                break;
 8000a78:	bf00      	nop
 8000a7a:	e004      	b.n	8000a86 <_ZN5Snake24receive_movement_commandEv+0xca>
                break;
 8000a7c:	bf00      	nop
 8000a7e:	e002      	b.n	8000a86 <_ZN5Snake24receive_movement_commandEv+0xca>
                break;
 8000a80:	bf00      	nop
 8000a82:	e000      	b.n	8000a86 <_ZN5Snake24receive_movement_commandEv+0xca>
                break;
 8000a84:	bf00      	nop
        }
        return 0; // snake moved
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <_ZN5Snake24receive_movement_commandEv+0xd0>
    }
    return 1; // snake didn't move
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_ZN5Snake4moveEv>:
void Snake::move(){
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    // record tail position, this is used to know where to grow the snake if it eats a fruit
    x_coord_snake_tail = x_coord_snake[snake_len-1];
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    y_coord_snake_tail = y_coord_snake[snake_len-1];
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	f993 2044 	ldrsb.w	r2, [r3, #68]	; 0x44
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    // shift coordinates from back to front of the array
    for(int i=(snake_len-1);i>0;i--){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e01a      	b.n	8000b0a <_ZN5Snake4moveEv+0x76>
        x_coord_snake[i] = x_coord_snake[i-1];
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	f993 1004 	ldrsb.w	r1, [r3, #4]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	460a      	mov	r2, r1
 8000aea:	701a      	strb	r2, [r3, #0]
        y_coord_snake[i] = y_coord_snake[i-1];
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	f993 1044 	ldrsb.w	r1, [r3, #68]	; 0x44
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4413      	add	r3, r2
 8000afe:	3344      	adds	r3, #68	; 0x44
 8000b00:	460a      	mov	r2, r1
 8000b02:	701a      	strb	r2, [r3, #0]
    for(int i=(snake_len-1);i>0;i--){
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dce1      	bgt.n	8000ad4 <_ZN5Snake4moveEv+0x40>
    }
    // move the head of the snake
    x_coord_snake[0] += x_velocity;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f993 3086 	ldrsb.w	r3, [r3, #134]	; 0x86
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	b25a      	sxtb	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	711a      	strb	r2, [r3, #4]
    y_coord_snake[0] += y_velocity;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f993 3087 	ldrsb.w	r3, [r3, #135]	; 0x87
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	b25a      	sxtb	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    // check if snake is out of bounds
    if(x_coord_snake[0] < 0){
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	da03      	bge.n	8000b58 <_ZN5Snake4moveEv+0xc4>
		x_coord_snake[0] = 7;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2207      	movs	r2, #7
 8000b54:	711a      	strb	r2, [r3, #4]
		y_coord_snake[0] = 7;
    }
    else if(y_coord_snake[0] > 7){
		y_coord_snake[0] = 0;
	}
}
 8000b56:	e01b      	b.n	8000b90 <_ZN5Snake4moveEv+0xfc>
    else if(x_coord_snake[0] > 7){
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	dd03      	ble.n	8000b6a <_ZN5Snake4moveEv+0xd6>
		x_coord_snake[0] = 0;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	711a      	strb	r2, [r3, #4]
}
 8000b68:	e012      	b.n	8000b90 <_ZN5Snake4moveEv+0xfc>
    else if(y_coord_snake[0] < 0){
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	da04      	bge.n	8000b7e <_ZN5Snake4moveEv+0xea>
		y_coord_snake[0] = 7;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2207      	movs	r2, #7
 8000b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8000b7c:	e008      	b.n	8000b90 <_ZN5Snake4moveEv+0xfc>
    else if(y_coord_snake[0] > 7){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8000b84:	2b07      	cmp	r3, #7
 8000b86:	dd03      	ble.n	8000b90 <_ZN5Snake4moveEv+0xfc>
		y_coord_snake[0] = 0;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_ZN5Snake19check_for_collisionEv>:
uint8_t Snake::check_for_collision(){
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    // snake can only eat itself if snake_len > 4
    for(int i=4;i<snake_len;i++){
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	e01a      	b.n	8000be0 <_ZN5Snake19check_for_collisionEv+0x44>
        if((x_coord_snake[0] == x_coord_snake[i]) && (y_coord_snake[0] == y_coord_snake[i])){
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d10c      	bne.n	8000bda <_ZN5Snake19check_for_collisionEv+0x3e>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f993 2044 	ldrsb.w	r2, [r3, #68]	; 0x44
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	440b      	add	r3, r1
 8000bcc:	3344      	adds	r3, #68	; 0x44
 8000bce:	f993 3000 	ldrsb.w	r3, [r3]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d101      	bne.n	8000bda <_ZN5Snake19check_for_collisionEv+0x3e>
            return 1; // snake eats itself = game over
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e03f      	b.n	8000c5a <_ZN5Snake19check_for_collisionEv+0xbe>
    for(int i=4;i<snake_len;i++){
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000be6:	461a      	mov	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4293      	cmp	r3, r2
 8000bec:	dbdd      	blt.n	8000baa <_ZN5Snake19check_for_collisionEv+0xe>
        }
    }
    if((x_coord_snake[0] == x_coord_fruit) && (y_coord_snake[0] == y_coord_fruit)){
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d12b      	bne.n	8000c58 <_ZN5Snake19check_for_collisionEv+0xbc>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8000c06:	461a      	mov	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d122      	bne.n	8000c58 <_ZN5Snake19check_for_collisionEv+0xbc>
        fruit_exists = 0; // snake eats fruit
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        x_coord_snake[snake_len] = x_coord_snake_tail;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000c20:	4619      	mov	r1, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	440b      	add	r3, r1
 8000c2c:	711a      	strb	r2, [r3, #4]
        y_coord_snake[snake_len] = y_coord_snake_tail;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000c34:	4619      	mov	r1, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f993 2085 	ldrsb.w	r2, [r3, #133]	; 0x85
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        snake_len++; // snake grows
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        return 2; // snake eats fruit = snake grows
 8000c54:	2302      	movs	r3, #2
 8000c56:	e000      	b.n	8000c5a <_ZN5Snake19check_for_collisionEv+0xbe>
    }
    return 0; // no collision = continue
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_ZN5Snake9game_overEv>:

void Snake::game_over(){
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b084      	sub	sp, #16
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
    matrix.clear();
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	338c      	adds	r3, #140	; 0x8c
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fcce 	bl	8000614 <_ZN7MAX72195clearEv>
    for(int i=0;i<snake_len;i++){
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e019      	b.n	8000cb2 <_ZN5Snake9game_overEv+0x4c>
        uint8_t column = i / 8;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	da00      	bge.n	8000c86 <_ZN5Snake9game_overEv+0x20>
 8000c84:	3307      	adds	r3, #7
 8000c86:	10db      	asrs	r3, r3, #3
 8000c88:	72fb      	strb	r3, [r7, #11]
        uint8_t row = i % 8;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	425a      	negs	r2, r3
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	f002 0207 	and.w	r2, r2, #7
 8000c96:	bf58      	it	pl
 8000c98:	4253      	negpl	r3, r2
 8000c9a:	72bb      	strb	r3, [r7, #10]
        matrix.switchLED(column,row,1);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8000ca2:	7aba      	ldrb	r2, [r7, #10]
 8000ca4:	7af9      	ldrb	r1, [r7, #11]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f7ff fd10 	bl	80006cc <_ZN7MAX72199switchLEDEhhh>
    for(int i=0;i<snake_len;i++){
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	dbde      	blt.n	8000c7e <_ZN5Snake9game_overEv+0x18>
    }
    while(receive_movement_command() == 1); // wait for any input from user to restart the game
 8000cc0:	bf00      	nop
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fe7a 	bl	80009bc <_ZN5Snake24receive_movement_commandEv>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	bf0c      	ite	eq
 8000cce:	2301      	moveq	r3, #1
 8000cd0:	2300      	movne	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f4      	bne.n	8000cc2 <_ZN5Snake9game_overEv+0x5c>
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t screen_refresh_period = 200;
 8000cea:	23c8      	movs	r3, #200	; 0xc8
 8000cec:	80fb      	strh	r3, [r7, #6]
  uint8_t LED_intensity = 6;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f000 fc25 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 f825 	bl	8000d44 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f000 f961 	bl	8000fc0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000cfe:	f000 f931 	bl	8000f64 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000d02:	f000 f8f3 	bl	8000eec <_ZL12MX_SPI1_Initv>
  MX_ADC1_Init();
 8000d06:	f000 f895 	bl	8000e34 <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000d0a:	480c      	ldr	r0, [pc, #48]	; (8000d3c <main+0x58>)
 8000d0c:	f000 fcf2 	bl	80016f4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10);
 8000d10:	210a      	movs	r1, #10
 8000d12:	480a      	ldr	r0, [pc, #40]	; (8000d3c <main+0x58>)
 8000d14:	f000 fdf3 	bl	80018fe <HAL_ADC_PollForConversion>
  snake.init(screen_refresh_period, LED_intensity, HAL_ADC_GetValue(&hadc1));
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <main+0x58>)
 8000d1a:	f000 fe7b 	bl	8001a14 <HAL_ADC_GetValue>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	797a      	ldrb	r2, [r7, #5]
 8000d24:	88f9      	ldrh	r1, [r7, #6]
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <main+0x5c>)
 8000d28:	f7ff fd27 	bl	800077a <_ZN5Snake4initEtht>
  HAL_ADC_Stop(&hadc1);
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <main+0x58>)
 8000d2e:	f000 fdb3 	bl	8001898 <HAL_ADC_Stop>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	snake.play();
 8000d32:	4803      	ldr	r0, [pc, #12]	; (8000d40 <main+0x5c>)
 8000d34:	f7ff fd45 	bl	80007c2 <_ZN5Snake4playEv>
 8000d38:	e7fb      	b.n	8000d32 <main+0x4e>
 8000d3a:	bf00      	nop
 8000d3c:	20000084 	.word	0x20000084
 8000d40:	20000168 	.word	0x20000168

08000d44 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b094      	sub	sp, #80	; 0x50
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	2234      	movs	r2, #52	; 0x34
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 f8e9 	bl	8003f2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <_Z18SystemClock_Configv+0xe8>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a2e      	ldr	r2, [pc, #184]	; (8000e2c <_Z18SystemClock_Configv+0xe8>)
 8000d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <_Z18SystemClock_Configv+0xe8>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d84:	2300      	movs	r3, #0
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <_Z18SystemClock_Configv+0xec>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d90:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <_Z18SystemClock_Configv+0xec>)
 8000d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <_Z18SystemClock_Configv+0xec>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dac:	2310      	movs	r3, #16
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db4:	2300      	movs	r3, #0
 8000db6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000db8:	2310      	movs	r3, #16
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dbc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 fe38 	bl	8002a48 <HAL_RCC_OscConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf14      	ite	ne
 8000dde:	2301      	movne	r3, #1
 8000de0:	2300      	moveq	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8000de8:	f000 f958 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	230f      	movs	r3, #15
 8000dee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df0:	2302      	movs	r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	2102      	movs	r1, #2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fad3 	bl	80023b4 <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf14      	ite	ne
 8000e14:	2301      	movne	r3, #1
 8000e16:	2300      	moveq	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8000e1e:	f000 f93d 	bl	800109c <Error_Handler>
  }
}
 8000e22:	bf00      	nop
 8000e24:	3750      	adds	r7, #80	; 0x50
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e48:	4a26      	ldr	r2, [pc, #152]	; (8000ee4 <_ZL12MX_ADC1_Initv+0xb0>)
 8000e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e54:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <_ZL12MX_ADC1_Initv+0xb4>)
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e94:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000e96:	f000 fbe9 	bl	800166c <HAL_ADC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf14      	ite	ne
 8000ea0:	2301      	movne	r3, #1
 8000ea2:	2300      	moveq	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8000eaa:	f000 f8f7 	bl	800109c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4808      	ldr	r0, [pc, #32]	; (8000ee0 <_ZL12MX_ADC1_Initv+0xac>)
 8000ec0:	f000 fdb6 	bl	8001a30 <HAL_ADC_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf14      	ite	ne
 8000eca:	2301      	movne	r3, #1
 8000ecc:	2300      	moveq	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000ed4:	f000 f8e2 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000084 	.word	0x20000084
 8000ee4:	40012000 	.word	0x40012000
 8000ee8:	0f000001 	.word	0x0f000001

08000eec <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000ef2:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <_ZL12MX_SPI1_Initv+0x74>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000f20:	2228      	movs	r2, #40	; 0x28
 8000f22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000f38:	220a      	movs	r2, #10
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <_ZL12MX_SPI1_Initv+0x70>)
 8000f3e:	f002 f821 	bl	8002f84 <HAL_SPI_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf14      	ite	ne
 8000f48:	2301      	movne	r3, #1
 8000f4a:	2300      	moveq	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000f52:	f000 f8a3 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000cc 	.word	0x200000cc
 8000f60:	40013000 	.word	0x40013000

08000f64 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f6a:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <_ZL19MX_USART2_UART_Initv+0x58>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f9c:	f002 fa82 	bl	80034a4 <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000fb0:	f000 f874 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000124 	.word	0x20000124
 8000fbc:	40004400 	.word	0x40004400

08000fc0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a2c      	ldr	r2, [pc, #176]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b26      	ldr	r3, [pc, #152]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a25      	ldr	r2, [pc, #148]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 8000ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1e      	ldr	r2, [pc, #120]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <_ZL12MX_GPIO_Initv+0xd0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2140      	movs	r1, #64	; 0x40
 800104a:	4812      	ldr	r0, [pc, #72]	; (8001094 <_ZL12MX_GPIO_Initv+0xd4>)
 800104c:	f001 f998 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001056:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	480c      	ldr	r0, [pc, #48]	; (8001098 <_ZL12MX_GPIO_Initv+0xd8>)
 8001068:	f000 fff6 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800106c:	2340      	movs	r3, #64	; 0x40
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <_ZL12MX_GPIO_Initv+0xd4>)
 8001084:	f000 ffe8 	bl	8002058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40020400 	.word	0x40020400
 8001098:	40020800 	.word	0x40020800

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d109      	bne.n	80010cc <_Z41__static_initialization_and_destruction_0ii+0x24>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010be:	4293      	cmp	r3, r2
 80010c0:	d104      	bne.n	80010cc <_Z41__static_initialization_and_destruction_0ii+0x24>
Snake snake(&hspi1, &huart2);
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80010c4:	4904      	ldr	r1, [pc, #16]	; (80010d8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80010c8:	f7ff fb42 	bl	8000750 <_ZN5SnakeC1EP19__SPI_HandleTypeDefP20__UART_HandleTypeDef>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000124 	.word	0x20000124
 80010d8:	200000cc 	.word	0x200000cc
 80010dc:	20000168 	.word	0x20000168

080010e0 <_GLOBAL__sub_I_hadc1>:
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010e8:	2001      	movs	r0, #1
 80010ea:	f7ff ffdd 	bl	80010a8 <_Z41__static_initialization_and_destruction_0ii>
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <HAL_MspInit+0x4c>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_MspInit+0x4c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_MspInit+0x4c>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_MspInit+0x4c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800112e:	2007      	movs	r0, #7
 8001130:	f000 ff5e 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800

08001140 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_ADC_MspInit+0x7c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d127      	bne.n	80011b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_ADC_MspInit+0x80>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a15      	ldr	r2, [pc, #84]	; (80011c0 <HAL_ADC_MspInit+0x80>)
 800116c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_ADC_MspInit+0x80>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_ADC_MspInit+0x80>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_ADC_MspInit+0x80>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_ADC_MspInit+0x80>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800119a:	2301      	movs	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119e:	2303      	movs	r3, #3
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_ADC_MspInit+0x84>)
 80011ae:	f000 ff53 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40012000 	.word	0x40012000
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a19      	ldr	r2, [pc, #100]	; (800124c <HAL_SPI_MspInit+0x84>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d12b      	bne.n	8001242 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_SPI_MspInit+0x88>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_SPI_MspInit+0x88>)
 80011f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_SPI_MspInit+0x88>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_SPI_MspInit+0x88>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_SPI_MspInit+0x88>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_SPI_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001222:	23a0      	movs	r3, #160	; 0xa0
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001232:	2305      	movs	r3, #5
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_SPI_MspInit+0x8c>)
 800123e:	f000 ff0b 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	; 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40013000 	.word	0x40013000
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_UART_MspInit+0x84>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12b      	bne.n	80012d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_UART_MspInit+0x88>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_UART_MspInit+0x88>)
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_UART_MspInit+0x88>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_UART_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_UART_MspInit+0x88>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_UART_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012b2:	230c      	movs	r3, #12
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c2:	2307      	movs	r3, #7
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_UART_MspInit+0x8c>)
 80012ce:	f000 fec3 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40004400 	.word	0x40004400
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f956 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return 1;
 8001340:	2301      	movs	r3, #1
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_kill>:

int _kill(int pid, int sig)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001356:	f002 fe37 	bl	8003fc8 <__errno>
 800135a:	4603      	mov	r3, r0
 800135c:	2216      	movs	r2, #22
 800135e:	601a      	str	r2, [r3, #0]
  return -1;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_exit>:

void _exit (int status)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffe7 	bl	800134c <_kill>
  while (1) {}    /* Make sure we hang here */
 800137e:	e7fe      	b.n	800137e <_exit+0x12>

08001380 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e00a      	b.n	80013a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001392:	f3af 8000 	nop.w
 8001396:	4601      	mov	r1, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	60ba      	str	r2, [r7, #8]
 800139e:	b2ca      	uxtb	r2, r1
 80013a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf0      	blt.n	8001392 <_read+0x12>
  }

  return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e009      	b.n	80013e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	60ba      	str	r2, [r7, #8]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf1      	blt.n	80013cc <_write+0x12>
  }
  return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_close>:

int _close(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800141a:	605a      	str	r2, [r3, #4]
  return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_isatty>:

int _isatty(int file)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800148c:	f002 fd9c 	bl	8003fc8 <__errno>
 8001490:	4603      	mov	r3, r0
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e009      	b.n	80014b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20020000 	.word	0x20020000
 80014bc:	00000400 	.word	0x00000400
 80014c0:	20000204 	.word	0x20000204
 80014c4:	20000358 	.word	0x20000358

080014c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <SystemInit+0x20>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <SystemInit+0x20>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f2:	490e      	ldr	r1, [pc, #56]	; (800152c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001508:	4c0b      	ldr	r4, [pc, #44]	; (8001538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001516:	f7ff ffd7 	bl	80014c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151a:	f002 fd5b 	bl	8003fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff fbe1 	bl	8000ce4 <main>
  bx  lr    
 8001522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001530:	08004d94 	.word	0x08004d94
  ldr r2, =_sbss
 8001534:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001538:	20000358 	.word	0x20000358

0800153c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <HAL_Init+0x40>)
 800154a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_Init+0x40>)
 8001556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_Init+0x40>)
 8001562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 fd41 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	2000      	movs	r0, #0
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff fdbc 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fd4b 	bl	800203e <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 fd21 	bl	8002006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x20>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x24>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_IncTick+0x24>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000008 	.word	0x20000008
 8001608:	20000208 	.word	0x20000208

0800160c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_GetTick+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000208 	.word	0x20000208

08001624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff ffee 	bl	800160c <HAL_GetTick>
 8001630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d005      	beq.n	800164a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_Delay+0x44>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800164a:	bf00      	nop
 800164c:	f7ff ffde 	bl	800160c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	429a      	cmp	r2, r3
 800165a:	d8f7      	bhi.n	800164c <HAL_Delay+0x28>
  {
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008

0800166c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e033      	b.n	80016ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fd58 	bl	8001140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d118      	bne.n	80016dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016b2:	f023 0302 	bic.w	r3, r3, #2
 80016b6:	f043 0202 	orr.w	r2, r3, #2
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fae8 	bl	8001c94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f023 0303 	bic.w	r3, r3, #3
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
 80016da:	e001      	b.n	80016e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_Start+0x1a>
 800170a:	2302      	movs	r3, #2
 800170c:	e0b2      	b.n	8001874 <HAL_ADC_Start+0x180>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d018      	beq.n	8001756 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001734:	4b52      	ldr	r3, [pc, #328]	; (8001880 <HAL_ADC_Start+0x18c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a52      	ldr	r2, [pc, #328]	; (8001884 <HAL_ADC_Start+0x190>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0c9a      	lsrs	r2, r3, #18
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001748:	e002      	b.n	8001750 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3b01      	subs	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f9      	bne.n	800174a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d17a      	bne.n	800185a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800178e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a2:	d106      	bne.n	80017b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	f023 0206 	bic.w	r2, r3, #6
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	645a      	str	r2, [r3, #68]	; 0x44
 80017b0:	e002      	b.n	80017b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c0:	4b31      	ldr	r3, [pc, #196]	; (8001888 <HAL_ADC_Start+0x194>)
 80017c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d12a      	bne.n	8001830 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2b      	ldr	r2, [pc, #172]	; (800188c <HAL_ADC_Start+0x198>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d015      	beq.n	8001810 <HAL_ADC_Start+0x11c>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a29      	ldr	r2, [pc, #164]	; (8001890 <HAL_ADC_Start+0x19c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d105      	bne.n	80017fa <HAL_ADC_Start+0x106>
 80017ee:	4b26      	ldr	r3, [pc, #152]	; (8001888 <HAL_ADC_Start+0x194>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00a      	beq.n	8001810 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_ADC_Start+0x1a0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d136      	bne.n	8001872 <HAL_ADC_Start+0x17e>
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_ADC_Start+0x194>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	d130      	bne.n	8001872 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d129      	bne.n	8001872 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	e020      	b.n	8001872 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a15      	ldr	r2, [pc, #84]	; (800188c <HAL_ADC_Start+0x198>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d11b      	bne.n	8001872 <HAL_ADC_Start+0x17e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d114      	bne.n	8001872 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	e00b      	b.n	8001872 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f043 0210 	orr.w	r2, r3, #16
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	20000000 	.word	0x20000000
 8001884:	431bde83 	.word	0x431bde83
 8001888:	40012300 	.word	0x40012300
 800188c:	40012000 	.word	0x40012000
 8001890:	40012100 	.word	0x40012100
 8001894:	40012200 	.word	0x40012200

08001898 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Stop+0x16>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e021      	b.n	80018f2 <HAL_ADC_Stop+0x5a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d109      	bne.n	80018e8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191a:	d113      	bne.n	8001944 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800192a:	d10b      	bne.n	8001944 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f043 0220 	orr.w	r2, r3, #32
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e063      	b.n	8001a0c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001944:	f7ff fe62 	bl	800160c <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800194a:	e021      	b.n	8001990 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001952:	d01d      	beq.n	8001990 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_ADC_PollForConversion+0x6c>
 800195a:	f7ff fe57 	bl	800160c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d212      	bcs.n	8001990 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b02      	cmp	r3, #2
 8001976:	d00b      	beq.n	8001990 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f043 0204 	orr.w	r2, r3, #4
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e03d      	b.n	8001a0c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b02      	cmp	r3, #2
 800199c:	d1d6      	bne.n	800194c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f06f 0212 	mvn.w	r2, #18
 80019a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d123      	bne.n	8001a0a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d11f      	bne.n	8001a0a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d111      	bne.n	8001a0a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f043 0201 	orr.w	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x1c>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e113      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x244>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b09      	cmp	r3, #9
 8001a5a:	d925      	bls.n	8001aa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68d9      	ldr	r1, [r3, #12]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	3b1e      	subs	r3, #30
 8001a72:	2207      	movs	r2, #7
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	400a      	ands	r2, r1
 8001a80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68d9      	ldr	r1, [r3, #12]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	4603      	mov	r3, r0
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4403      	add	r3, r0
 8001a9a:	3b1e      	subs	r3, #30
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	e022      	b.n	8001aee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6919      	ldr	r1, [r3, #16]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	2207      	movs	r2, #7
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	400a      	ands	r2, r1
 8001aca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6919      	ldr	r1, [r3, #16]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4403      	add	r3, r0
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d824      	bhi.n	8001b40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	3b05      	subs	r3, #5
 8001b08:	221f      	movs	r2, #31
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	400a      	ands	r2, r1
 8001b16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4618      	mov	r0, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b05      	subs	r3, #5
 8001b32:	fa00 f203 	lsl.w	r2, r0, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b3e:	e04c      	b.n	8001bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b0c      	cmp	r3, #12
 8001b46:	d824      	bhi.n	8001b92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	3b23      	subs	r3, #35	; 0x23
 8001b5a:	221f      	movs	r2, #31
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43da      	mvns	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	400a      	ands	r2, r1
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	3b23      	subs	r3, #35	; 0x23
 8001b84:	fa00 f203 	lsl.w	r2, r0, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b90:	e023      	b.n	8001bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b41      	subs	r3, #65	; 0x41
 8001ba4:	221f      	movs	r2, #31
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b41      	subs	r3, #65	; 0x41
 8001bce:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <HAL_ADC_ConfigChannel+0x250>)
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <HAL_ADC_ConfigChannel+0x254>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d10f      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x1d8>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b12      	cmp	r3, #18
 8001bee:	d10b      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_ADC_ConfigChannel+0x254>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d12b      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x23a>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <HAL_ADC_ConfigChannel+0x258>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d003      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0x1f4>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b11      	cmp	r3, #17
 8001c22:	d122      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_ADC_ConfigChannel+0x258>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d111      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_ADC_ConfigChannel+0x25c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <HAL_ADC_ConfigChannel+0x260>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	0c9a      	lsrs	r2, r3, #18
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c5c:	e002      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f9      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	40012300 	.word	0x40012300
 8001c84:	40012000 	.word	0x40012000
 8001c88:	10000012 	.word	0x10000012
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	431bde83 	.word	0x431bde83

08001c94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c9c:	4b79      	ldr	r3, [pc, #484]	; (8001e84 <ADC_Init+0x1f0>)
 8001c9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	021a      	lsls	r2, r3, #8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6899      	ldr	r1, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <ADC_Init+0x1f4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d022      	beq.n	8001d72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6899      	ldr	r1, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6899      	ldr	r1, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	e00f      	b.n	8001d92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0202 	bic.w	r2, r2, #2
 8001da0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6899      	ldr	r1, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e1b      	ldrb	r3, [r3, #24]
 8001dac:	005a      	lsls	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01b      	beq.n	8001df8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6859      	ldr	r1, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	3b01      	subs	r3, #1
 8001dec:	035a      	lsls	r2, r3, #13
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	e007      	b.n	8001e08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	051a      	lsls	r2, r3, #20
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6899      	ldr	r1, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e4a:	025a      	lsls	r2, r3, #9
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6899      	ldr	r1, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	029a      	lsls	r2, r3, #10
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40012300 	.word	0x40012300
 8001e88:	0f000001 	.word	0x0f000001

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db0a      	blt.n	8001f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	490c      	ldr	r1, [pc, #48]	; (8001f3c <__NVIC_SetPriority+0x4c>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f18:	e00a      	b.n	8001f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4908      	ldr	r1, [pc, #32]	; (8001f40 <__NVIC_SetPriority+0x50>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3b04      	subs	r3, #4
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	761a      	strb	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f1c3 0307 	rsb	r3, r3, #7
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf28      	it	cs
 8001f62:	2304      	movcs	r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d902      	bls.n	8001f74 <NVIC_EncodePriority+0x30>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3b03      	subs	r3, #3
 8001f72:	e000      	b.n	8001f76 <NVIC_EncodePriority+0x32>
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	4313      	orrs	r3, r2
         );
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fbc:	d301      	bcc.n	8001fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00f      	b.n	8001fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <SysTick_Config+0x40>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fca:	210f      	movs	r1, #15
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f7ff ff8e 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <SysTick_Config+0x40>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <SysTick_Config+0x40>)
 8001fdc:	2207      	movs	r2, #7
 8001fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000e010 	.word	0xe000e010

08001ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff47 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002018:	f7ff ff5c 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 800201c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff8e 	bl	8001f44 <NVIC_EncodePriority>
 8002028:	4602      	mov	r2, r0
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffb0 	bl	8001fac <SysTick_Config>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e165      	b.n	8002340 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	429a      	cmp	r2, r3
 800208e:	f040 8154 	bne.w	800233a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d005      	beq.n	80020aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d130      	bne.n	800210c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 0201 	and.w	r2, r3, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d017      	beq.n	8002148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d123      	bne.n	800219c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	69b9      	ldr	r1, [r7, #24]
 8002198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80ae 	beq.w	800233a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <HAL_GPIO_Init+0x300>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a5c      	ldr	r2, [pc, #368]	; (8002358 <HAL_GPIO_Init+0x300>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b5a      	ldr	r3, [pc, #360]	; (8002358 <HAL_GPIO_Init+0x300>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fa:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_GPIO_Init+0x304>)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	3302      	adds	r3, #2
 8002202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4f      	ldr	r2, [pc, #316]	; (8002360 <HAL_GPIO_Init+0x308>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d025      	beq.n	8002272 <HAL_GPIO_Init+0x21a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4e      	ldr	r2, [pc, #312]	; (8002364 <HAL_GPIO_Init+0x30c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01f      	beq.n	800226e <HAL_GPIO_Init+0x216>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4d      	ldr	r2, [pc, #308]	; (8002368 <HAL_GPIO_Init+0x310>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d019      	beq.n	800226a <HAL_GPIO_Init+0x212>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4c      	ldr	r2, [pc, #304]	; (800236c <HAL_GPIO_Init+0x314>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0x20e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4b      	ldr	r2, [pc, #300]	; (8002370 <HAL_GPIO_Init+0x318>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00d      	beq.n	8002262 <HAL_GPIO_Init+0x20a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4a      	ldr	r2, [pc, #296]	; (8002374 <HAL_GPIO_Init+0x31c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <HAL_GPIO_Init+0x206>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a49      	ldr	r2, [pc, #292]	; (8002378 <HAL_GPIO_Init+0x320>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_GPIO_Init+0x202>
 8002256:	2306      	movs	r3, #6
 8002258:	e00c      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 800225a:	2307      	movs	r3, #7
 800225c:	e00a      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 800225e:	2305      	movs	r3, #5
 8002260:	e008      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 8002262:	2304      	movs	r3, #4
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x21c>
 8002272:	2300      	movs	r3, #0
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002284:	4935      	ldr	r1, [pc, #212]	; (800235c <HAL_GPIO_Init+0x304>)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002292:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_GPIO_Init+0x324>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022b6:	4a31      	ldr	r2, [pc, #196]	; (800237c <HAL_GPIO_Init+0x324>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <HAL_GPIO_Init+0x324>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e0:	4a26      	ldr	r2, [pc, #152]	; (800237c <HAL_GPIO_Init+0x324>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022e6:	4b25      	ldr	r3, [pc, #148]	; (800237c <HAL_GPIO_Init+0x324>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230a:	4a1c      	ldr	r2, [pc, #112]	; (800237c <HAL_GPIO_Init+0x324>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002310:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_GPIO_Init+0x324>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002334:	4a11      	ldr	r2, [pc, #68]	; (800237c <HAL_GPIO_Init+0x324>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3301      	adds	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	f67f ae96 	bls.w	8002074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40013800 	.word	0x40013800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40021400 	.word	0x40021400
 8002378:	40021800 	.word	0x40021800
 800237c:	40013c00 	.word	0x40013c00

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800239c:	e003      	b.n	80023a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	041a      	lsls	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	619a      	str	r2, [r3, #24]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0cc      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b68      	ldr	r3, [pc, #416]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d90c      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b65      	ldr	r3, [pc, #404]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b63      	ldr	r3, [pc, #396]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0b8      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d020      	beq.n	800243e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002408:	4b59      	ldr	r3, [pc, #356]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a58      	ldr	r2, [pc, #352]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002420:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a52      	ldr	r2, [pc, #328]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800242a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	4b50      	ldr	r3, [pc, #320]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	494d      	ldr	r1, [pc, #308]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d044      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d119      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e07f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d003      	beq.n	8002472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	2b03      	cmp	r3, #3
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e067      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4b37      	ldr	r3, [pc, #220]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4934      	ldr	r1, [pc, #208]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7ff f8b2 	bl	800160c <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7ff f8ae 	bl	800160c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e04f      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d20c      	bcs.n	80024fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b22      	ldr	r3, [pc, #136]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e032      	b.n	8002562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4916      	ldr	r1, [pc, #88]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	490e      	ldr	r1, [pc, #56]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800253a:	f000 f855 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 800253e:	4602      	mov	r2, r0
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	490a      	ldr	r1, [pc, #40]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	5ccb      	ldrb	r3, [r1, r3]
 800254e:	fa22 f303 	lsr.w	r3, r2, r3
 8002552:	4a09      	ldr	r2, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff f812 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023c00 	.word	0x40023c00
 8002570:	40023800 	.word	0x40023800
 8002574:	08004c88 	.word	0x08004c88
 8002578:	20000000 	.word	0x20000000
 800257c:	20000004 	.word	0x20000004

08002580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_RCC_GetHCLKFreq+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000000 	.word	0x20000000

08002598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800259c:	f7ff fff0 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	0a9b      	lsrs	r3, r3, #10
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	4903      	ldr	r1, [pc, #12]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40023800 	.word	0x40023800
 80025bc:	08004c98 	.word	0x08004c98

080025c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025c4:	f7ff ffdc 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0b5b      	lsrs	r3, r3, #13
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800
 80025e4:	08004c98 	.word	0x08004c98

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ec:	b0ae      	sub	sp, #184	; 0xb8
 80025ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800260e:	4bcb      	ldr	r3, [pc, #812]	; (800293c <HAL_RCC_GetSysClockFreq+0x354>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b0c      	cmp	r3, #12
 8002618:	f200 8206 	bhi.w	8002a28 <HAL_RCC_GetSysClockFreq+0x440>
 800261c:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <HAL_RCC_GetSysClockFreq+0x3c>)
 800261e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002622:	bf00      	nop
 8002624:	08002659 	.word	0x08002659
 8002628:	08002a29 	.word	0x08002a29
 800262c:	08002a29 	.word	0x08002a29
 8002630:	08002a29 	.word	0x08002a29
 8002634:	08002661 	.word	0x08002661
 8002638:	08002a29 	.word	0x08002a29
 800263c:	08002a29 	.word	0x08002a29
 8002640:	08002a29 	.word	0x08002a29
 8002644:	08002669 	.word	0x08002669
 8002648:	08002a29 	.word	0x08002a29
 800264c:	08002a29 	.word	0x08002a29
 8002650:	08002a29 	.word	0x08002a29
 8002654:	08002859 	.word	0x08002859
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002658:	4bb9      	ldr	r3, [pc, #740]	; (8002940 <HAL_RCC_GetSysClockFreq+0x358>)
 800265a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800265e:	e1e7      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002660:	4bb8      	ldr	r3, [pc, #736]	; (8002944 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002662:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002666:	e1e3      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002668:	4bb4      	ldr	r3, [pc, #720]	; (800293c <HAL_RCC_GetSysClockFreq+0x354>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002674:	4bb1      	ldr	r3, [pc, #708]	; (800293c <HAL_RCC_GetSysClockFreq+0x354>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d071      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002680:	4bae      	ldr	r3, [pc, #696]	; (800293c <HAL_RCC_GetSysClockFreq+0x354>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	2200      	movs	r2, #0
 8002688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800268c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002698:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80026a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026a6:	4622      	mov	r2, r4
 80026a8:	462b      	mov	r3, r5
 80026aa:	f04f 0000 	mov.w	r0, #0
 80026ae:	f04f 0100 	mov.w	r1, #0
 80026b2:	0159      	lsls	r1, r3, #5
 80026b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b8:	0150      	lsls	r0, r2, #5
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4621      	mov	r1, r4
 80026c0:	1a51      	subs	r1, r2, r1
 80026c2:	6439      	str	r1, [r7, #64]	; 0x40
 80026c4:	4629      	mov	r1, r5
 80026c6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ca:	647b      	str	r3, [r7, #68]	; 0x44
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80026d8:	4649      	mov	r1, r9
 80026da:	018b      	lsls	r3, r1, #6
 80026dc:	4641      	mov	r1, r8
 80026de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026e2:	4641      	mov	r1, r8
 80026e4:	018a      	lsls	r2, r1, #6
 80026e6:	4641      	mov	r1, r8
 80026e8:	1a51      	subs	r1, r2, r1
 80026ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80026ec:	4649      	mov	r1, r9
 80026ee:	eb63 0301 	sbc.w	r3, r3, r1
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002700:	4649      	mov	r1, r9
 8002702:	00cb      	lsls	r3, r1, #3
 8002704:	4641      	mov	r1, r8
 8002706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800270a:	4641      	mov	r1, r8
 800270c:	00ca      	lsls	r2, r1, #3
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	4603      	mov	r3, r0
 8002714:	4622      	mov	r2, r4
 8002716:	189b      	adds	r3, r3, r2
 8002718:	633b      	str	r3, [r7, #48]	; 0x30
 800271a:	462b      	mov	r3, r5
 800271c:	460a      	mov	r2, r1
 800271e:	eb42 0303 	adc.w	r3, r2, r3
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002730:	4629      	mov	r1, r5
 8002732:	024b      	lsls	r3, r1, #9
 8002734:	4621      	mov	r1, r4
 8002736:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800273a:	4621      	mov	r1, r4
 800273c:	024a      	lsls	r2, r1, #9
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800274c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002750:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002754:	f7fd fdac 	bl	80002b0 <__aeabi_uldivmod>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4613      	mov	r3, r2
 800275e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002762:	e067      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002764:	4b75      	ldr	r3, [pc, #468]	; (800293c <HAL_RCC_GetSysClockFreq+0x354>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	2200      	movs	r2, #0
 800276c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002770:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002774:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277c:	67bb      	str	r3, [r7, #120]	; 0x78
 800277e:	2300      	movs	r3, #0
 8002780:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002782:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002786:	4622      	mov	r2, r4
 8002788:	462b      	mov	r3, r5
 800278a:	f04f 0000 	mov.w	r0, #0
 800278e:	f04f 0100 	mov.w	r1, #0
 8002792:	0159      	lsls	r1, r3, #5
 8002794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002798:	0150      	lsls	r0, r2, #5
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4621      	mov	r1, r4
 80027a0:	1a51      	subs	r1, r2, r1
 80027a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80027a4:	4629      	mov	r1, r5
 80027a6:	eb63 0301 	sbc.w	r3, r3, r1
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80027b8:	4649      	mov	r1, r9
 80027ba:	018b      	lsls	r3, r1, #6
 80027bc:	4641      	mov	r1, r8
 80027be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027c2:	4641      	mov	r1, r8
 80027c4:	018a      	lsls	r2, r1, #6
 80027c6:	4641      	mov	r1, r8
 80027c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80027cc:	4649      	mov	r1, r9
 80027ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027e6:	4692      	mov	sl, r2
 80027e8:	469b      	mov	fp, r3
 80027ea:	4623      	mov	r3, r4
 80027ec:	eb1a 0303 	adds.w	r3, sl, r3
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	462b      	mov	r3, r5
 80027f4:	eb4b 0303 	adc.w	r3, fp, r3
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002806:	4629      	mov	r1, r5
 8002808:	028b      	lsls	r3, r1, #10
 800280a:	4621      	mov	r1, r4
 800280c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002810:	4621      	mov	r1, r4
 8002812:	028a      	lsls	r2, r1, #10
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800281c:	2200      	movs	r2, #0
 800281e:	673b      	str	r3, [r7, #112]	; 0x70
 8002820:	677a      	str	r2, [r7, #116]	; 0x74
 8002822:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002826:	f7fd fd43 	bl	80002b0 <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4613      	mov	r3, r2
 8002830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002834:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_RCC_GetSysClockFreq+0x354>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	3301      	adds	r3, #1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800284a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002856:	e0eb      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002858:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_RCC_GetSysClockFreq+0x354>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002864:	4b35      	ldr	r3, [pc, #212]	; (800293c <HAL_RCC_GetSysClockFreq+0x354>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d06b      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002870:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_RCC_GetSysClockFreq+0x354>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	2200      	movs	r2, #0
 8002878:	66bb      	str	r3, [r7, #104]	; 0x68
 800287a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800287c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800287e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002882:	663b      	str	r3, [r7, #96]	; 0x60
 8002884:	2300      	movs	r3, #0
 8002886:	667b      	str	r3, [r7, #100]	; 0x64
 8002888:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800288c:	4622      	mov	r2, r4
 800288e:	462b      	mov	r3, r5
 8002890:	f04f 0000 	mov.w	r0, #0
 8002894:	f04f 0100 	mov.w	r1, #0
 8002898:	0159      	lsls	r1, r3, #5
 800289a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800289e:	0150      	lsls	r0, r2, #5
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4621      	mov	r1, r4
 80028a6:	1a51      	subs	r1, r2, r1
 80028a8:	61b9      	str	r1, [r7, #24]
 80028aa:	4629      	mov	r1, r5
 80028ac:	eb63 0301 	sbc.w	r3, r3, r1
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028be:	4659      	mov	r1, fp
 80028c0:	018b      	lsls	r3, r1, #6
 80028c2:	4651      	mov	r1, sl
 80028c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028c8:	4651      	mov	r1, sl
 80028ca:	018a      	lsls	r2, r1, #6
 80028cc:	4651      	mov	r1, sl
 80028ce:	ebb2 0801 	subs.w	r8, r2, r1
 80028d2:	4659      	mov	r1, fp
 80028d4:	eb63 0901 	sbc.w	r9, r3, r1
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ec:	4690      	mov	r8, r2
 80028ee:	4699      	mov	r9, r3
 80028f0:	4623      	mov	r3, r4
 80028f2:	eb18 0303 	adds.w	r3, r8, r3
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	462b      	mov	r3, r5
 80028fa:	eb49 0303 	adc.w	r3, r9, r3
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800290c:	4629      	mov	r1, r5
 800290e:	024b      	lsls	r3, r1, #9
 8002910:	4621      	mov	r1, r4
 8002912:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002916:	4621      	mov	r1, r4
 8002918:	024a      	lsls	r2, r1, #9
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002922:	2200      	movs	r2, #0
 8002924:	65bb      	str	r3, [r7, #88]	; 0x58
 8002926:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002928:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800292c:	f7fd fcc0 	bl	80002b0 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800293a:	e065      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x420>
 800293c:	40023800 	.word	0x40023800
 8002940:	00f42400 	.word	0x00f42400
 8002944:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002948:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x458>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	099b      	lsrs	r3, r3, #6
 800294e:	2200      	movs	r2, #0
 8002950:	4618      	mov	r0, r3
 8002952:	4611      	mov	r1, r2
 8002954:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002958:	653b      	str	r3, [r7, #80]	; 0x50
 800295a:	2300      	movs	r3, #0
 800295c:	657b      	str	r3, [r7, #84]	; 0x54
 800295e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002962:	4642      	mov	r2, r8
 8002964:	464b      	mov	r3, r9
 8002966:	f04f 0000 	mov.w	r0, #0
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	0159      	lsls	r1, r3, #5
 8002970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002974:	0150      	lsls	r0, r2, #5
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4641      	mov	r1, r8
 800297c:	1a51      	subs	r1, r2, r1
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	4649      	mov	r1, r9
 8002982:	eb63 0301 	sbc.w	r3, r3, r1
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002994:	4659      	mov	r1, fp
 8002996:	018b      	lsls	r3, r1, #6
 8002998:	4651      	mov	r1, sl
 800299a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800299e:	4651      	mov	r1, sl
 80029a0:	018a      	lsls	r2, r1, #6
 80029a2:	4651      	mov	r1, sl
 80029a4:	1a54      	subs	r4, r2, r1
 80029a6:	4659      	mov	r1, fp
 80029a8:	eb63 0501 	sbc.w	r5, r3, r1
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	00eb      	lsls	r3, r5, #3
 80029b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ba:	00e2      	lsls	r2, r4, #3
 80029bc:	4614      	mov	r4, r2
 80029be:	461d      	mov	r5, r3
 80029c0:	4643      	mov	r3, r8
 80029c2:	18e3      	adds	r3, r4, r3
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	464b      	mov	r3, r9
 80029c8:	eb45 0303 	adc.w	r3, r5, r3
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029da:	4629      	mov	r1, r5
 80029dc:	028b      	lsls	r3, r1, #10
 80029de:	4621      	mov	r1, r4
 80029e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e4:	4621      	mov	r1, r4
 80029e6:	028a      	lsls	r2, r1, #10
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029f0:	2200      	movs	r2, #0
 80029f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80029f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80029f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029fa:	f7fd fc59 	bl	80002b0 <__aeabi_uldivmod>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4613      	mov	r3, r2
 8002a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	0f1b      	lsrs	r3, r3, #28
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a26:	e003      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	37b8      	adds	r7, #184	; 0xb8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	00f42400 	.word	0x00f42400

08002a48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e28d      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 8083 	beq.w	8002b6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a68:	4b94      	ldr	r3, [pc, #592]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d019      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a74:	4b91      	ldr	r3, [pc, #580]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a80:	4b8e      	ldr	r3, [pc, #568]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a8e:	4b8b      	ldr	r3, [pc, #556]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d112      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a9a:	4b88      	ldr	r3, [pc, #544]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa6:	d10b      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d05b      	beq.n	8002b6c <HAL_RCC_OscConfig+0x124>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d157      	bne.n	8002b6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e25a      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x90>
 8002aca:	4b7c      	ldr	r3, [pc, #496]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a7b      	ldr	r2, [pc, #492]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e01d      	b.n	8002b14 <HAL_RCC_OscConfig+0xcc>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0xb4>
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a75      	ldr	r2, [pc, #468]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a72      	ldr	r2, [pc, #456]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0xcc>
 8002afc:	4b6f      	ldr	r3, [pc, #444]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a6e      	ldr	r2, [pc, #440]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a6b      	ldr	r2, [pc, #428]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d013      	beq.n	8002b44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fd76 	bl	800160c <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b24:	f7fe fd72 	bl	800160c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e21f      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0xdc>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fd62 	bl	800160c <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7fe fd5e 	bl	800160c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e20b      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	4b57      	ldr	r3, [pc, #348]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x104>
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d06f      	beq.n	8002c5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b7a:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d017      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b86:	4b4d      	ldr	r3, [pc, #308]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d105      	bne.n	8002b9e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b92:	4b4a      	ldr	r3, [pc, #296]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d11c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002baa:	4b44      	ldr	r3, [pc, #272]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_RCC_OscConfig+0x186>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e1d3      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4937      	ldr	r1, [pc, #220]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	e03a      	b.n	8002c5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bec:	4b34      	ldr	r3, [pc, #208]	; (8002cc0 <HAL_RCC_OscConfig+0x278>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fd0b 	bl	800160c <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fd07 	bl	800160c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e1b4      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4925      	ldr	r1, [pc, #148]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
 8002c2c:	e015      	b.n	8002c5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_RCC_OscConfig+0x278>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fcea 	bl	800160c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fce6 	bl	800160c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e193      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d036      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d016      	beq.n	8002c9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fcca 	bl	800160c <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fcc6 	bl	800160c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e173      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x234>
 8002c9a:	e01b      	b.n	8002cd4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_OscConfig+0x27c>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fcb3 	bl	800160c <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	e00e      	b.n	8002cc8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002caa:	f7fe fcaf 	bl	800160c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d907      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e15c      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	42470000 	.word	0x42470000
 8002cc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc8:	4b8a      	ldr	r3, [pc, #552]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ea      	bne.n	8002caa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8097 	beq.w	8002e10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce6:	4b83      	ldr	r3, [pc, #524]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	4b7f      	ldr	r3, [pc, #508]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a7e      	ldr	r2, [pc, #504]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b7c      	ldr	r3, [pc, #496]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d12:	4b79      	ldr	r3, [pc, #484]	; (8002ef8 <HAL_RCC_OscConfig+0x4b0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d118      	bne.n	8002d50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1e:	4b76      	ldr	r3, [pc, #472]	; (8002ef8 <HAL_RCC_OscConfig+0x4b0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a75      	ldr	r2, [pc, #468]	; (8002ef8 <HAL_RCC_OscConfig+0x4b0>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2a:	f7fe fc6f 	bl	800160c <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d32:	f7fe fc6b 	bl	800160c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e118      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	4b6c      	ldr	r3, [pc, #432]	; (8002ef8 <HAL_RCC_OscConfig+0x4b0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_OscConfig+0x31e>
 8002d58:	4b66      	ldr	r3, [pc, #408]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a65      	ldr	r2, [pc, #404]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	e01c      	b.n	8002da0 <HAL_RCC_OscConfig+0x358>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x340>
 8002d6e:	4b61      	ldr	r3, [pc, #388]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	4a60      	ldr	r2, [pc, #384]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a5d      	ldr	r2, [pc, #372]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0x358>
 8002d88:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4a59      	ldr	r2, [pc, #356]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	6713      	str	r3, [r2, #112]	; 0x70
 8002d94:	4b57      	ldr	r3, [pc, #348]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a56      	ldr	r2, [pc, #344]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002d9a:	f023 0304 	bic.w	r3, r3, #4
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d015      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fe fc30 	bl	800160c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe fc2c 	bl	800160c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0d7      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0ee      	beq.n	8002db0 <HAL_RCC_OscConfig+0x368>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fc1a 	bl	800160c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fc16 	bl	800160c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e0c1      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df2:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1ee      	bne.n	8002ddc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d105      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e04:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	4a3a      	ldr	r2, [pc, #232]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80ad 	beq.w	8002f74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e1a:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d060      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d145      	bne.n	8002eba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2e:	4b33      	ldr	r3, [pc, #204]	; (8002efc <HAL_RCC_OscConfig+0x4b4>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe fbea 	bl	800160c <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe fbe6 	bl	800160c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e093      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	019b      	lsls	r3, r3, #6
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	3b01      	subs	r3, #1
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	071b      	lsls	r3, r3, #28
 8002e86:	491b      	ldr	r1, [pc, #108]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_RCC_OscConfig+0x4b4>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fe fbbb 	bl	800160c <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9a:	f7fe fbb7 	bl	800160c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e064      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f0      	beq.n	8002e9a <HAL_RCC_OscConfig+0x452>
 8002eb8:	e05c      	b.n	8002f74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCC_OscConfig+0x4b4>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fba4 	bl	800160c <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe fba0 	bl	800160c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e04d      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x480>
 8002ee6:	e045      	b.n	8002f74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e040      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f00:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <HAL_RCC_OscConfig+0x538>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d030      	beq.n	8002f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d129      	bne.n	8002f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d122      	bne.n	8002f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d119      	bne.n	8002f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d10f      	bne.n	8002f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e07b      	b.n	800308e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fa6:	d009      	beq.n	8002fbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	61da      	str	r2, [r3, #28]
 8002fae:	e005      	b.n	8002fbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe f8f6 	bl	80011c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003040:	ea42 0103 	orr.w	r1, r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	f003 0104 	and.w	r1, r3, #4
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f003 0210 	and.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800307c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b088      	sub	sp, #32
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4613      	mov	r3, r2
 80030a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_SPI_Transmit+0x22>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e126      	b.n	8003306 <HAL_SPI_Transmit+0x270>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030c0:	f7fe faa4 	bl	800160c <HAL_GetTick>
 80030c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d002      	beq.n	80030dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
 80030d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030da:	e10b      	b.n	80032f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_SPI_Transmit+0x52>
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030ec:	e102      	b.n	80032f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2203      	movs	r2, #3
 80030f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	88fa      	ldrh	r2, [r7, #6]
 8003106:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003134:	d10f      	bne.n	8003156 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003144:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003154:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d007      	beq.n	8003174 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003172:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317c:	d14b      	bne.n	8003216 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_SPI_Transmit+0xf6>
 8003186:	8afb      	ldrh	r3, [r7, #22]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d13e      	bne.n	800320a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031b0:	e02b      	b.n	800320a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d112      	bne.n	80031e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	1c9a      	adds	r2, r3, #2
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80031e4:	e011      	b.n	800320a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e6:	f7fe fa11 	bl	800160c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d803      	bhi.n	80031fe <HAL_SPI_Transmit+0x168>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d102      	bne.n	8003204 <HAL_SPI_Transmit+0x16e>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003208:	e074      	b.n	80032f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ce      	bne.n	80031b2 <HAL_SPI_Transmit+0x11c>
 8003214:	e04c      	b.n	80032b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_SPI_Transmit+0x18e>
 800321e:	8afb      	ldrh	r3, [r7, #22]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d140      	bne.n	80032a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	7812      	ldrb	r2, [r2, #0]
 8003230:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800324a:	e02c      	b.n	80032a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d113      	bne.n	8003282 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	330c      	adds	r3, #12
 8003264:	7812      	ldrb	r2, [r2, #0]
 8003266:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003280:	e011      	b.n	80032a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003282:	f7fe f9c3 	bl	800160c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d803      	bhi.n	800329a <HAL_SPI_Transmit+0x204>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d102      	bne.n	80032a0 <HAL_SPI_Transmit+0x20a>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d102      	bne.n	80032a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032a4:	e026      	b.n	80032f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1cd      	bne.n	800324c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	6839      	ldr	r1, [r7, #0]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f8b3 	bl	8003420 <SPI_EndRxTxTransaction>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e000      	b.n	80032f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80032f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003304:	7ffb      	ldrb	r3, [r7, #31]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003320:	f7fe f974 	bl	800160c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	4413      	add	r3, r2
 800332e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003330:	f7fe f96c 	bl	800160c <HAL_GetTick>
 8003334:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003336:	4b39      	ldr	r3, [pc, #228]	; (800341c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	015b      	lsls	r3, r3, #5
 800333c:	0d1b      	lsrs	r3, r3, #20
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	fb02 f303 	mul.w	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003346:	e054      	b.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d050      	beq.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003350:	f7fe f95c 	bl	800160c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	429a      	cmp	r2, r3
 800335e:	d902      	bls.n	8003366 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d13d      	bne.n	80033e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003374:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800337e:	d111      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003388:	d004      	beq.n	8003394 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003392:	d107      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ac:	d10f      	bne.n	80033ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e017      	b.n	8003412 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4013      	ands	r3, r2
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	429a      	cmp	r2, r3
 8003400:	bf0c      	ite	eq
 8003402:	2301      	moveq	r3, #1
 8003404:	2300      	movne	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	429a      	cmp	r2, r3
 800340e:	d19b      	bne.n	8003348 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000000 	.word	0x20000000

08003420 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <SPI_EndRxTxTransaction+0x7c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <SPI_EndRxTxTransaction+0x80>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0d5b      	lsrs	r3, r3, #21
 8003438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344a:	d112      	bne.n	8003472 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2200      	movs	r2, #0
 8003454:	2180      	movs	r1, #128	; 0x80
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff ff5a 	bl	8003310 <SPI_WaitFlagStateUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d016      	beq.n	8003490 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e00f      	b.n	8003492 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	3b01      	subs	r3, #1
 800347c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	2b80      	cmp	r3, #128	; 0x80
 800348a:	d0f2      	beq.n	8003472 <SPI_EndRxTxTransaction+0x52>
 800348c:	e000      	b.n	8003490 <SPI_EndRxTxTransaction+0x70>
        break;
 800348e:	bf00      	nop
  }

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000000 	.word	0x20000000
 80034a0:	165e9f81 	.word	0x165e9f81

080034a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e03f      	b.n	8003536 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fec4 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2224      	movs	r2, #36	; 0x24
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f939 	bl	8003760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800350c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800351c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b08a      	sub	sp, #40	; 0x28
 8003542:	af02      	add	r7, sp, #8
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b20      	cmp	r3, #32
 800355c:	f040 808c 	bne.w	8003678 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_UART_Receive+0x2e>
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e084      	b.n	800367a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_UART_Receive+0x40>
 800357a:	2302      	movs	r3, #2
 800357c:	e07d      	b.n	800367a <HAL_UART_Receive+0x13c>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2222      	movs	r2, #34	; 0x22
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800359a:	f7fe f837 	bl	800160c <HAL_GetTick>
 800359e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b4:	d108      	bne.n	80035c8 <HAL_UART_Receive+0x8a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e003      	b.n	80035d0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80035d8:	e043      	b.n	8003662 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2120      	movs	r1, #32
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f84c 	bl	8003682 <UART_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e042      	b.n	800367a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10c      	bne.n	8003614 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	b29b      	uxth	r3, r3
 8003602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003606:	b29a      	uxth	r2, r3
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	3302      	adds	r3, #2
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	e01f      	b.n	8003654 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361c:	d007      	beq.n	800362e <HAL_UART_Receive+0xf0>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <HAL_UART_Receive+0xfe>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e008      	b.n	800364e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003648:	b2da      	uxtb	r2, r3
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3301      	adds	r3, #1
 8003652:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1b6      	bne.n	80035da <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	e000      	b.n	800367a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003678:	2302      	movs	r3, #2
  }
}
 800367a:	4618      	mov	r0, r3
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b090      	sub	sp, #64	; 0x40
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	4613      	mov	r3, r2
 8003690:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003692:	e050      	b.n	8003736 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d04c      	beq.n	8003736 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800369c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036a2:	f7fd ffb3 	bl	800160c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d241      	bcs.n	8003736 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	330c      	adds	r3, #12
 80036d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036d2:	637a      	str	r2, [r7, #52]	; 0x34
 80036d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e5      	bne.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3314      	adds	r3, #20
 80036ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	613b      	str	r3, [r7, #16]
   return(result);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3314      	adds	r3, #20
 8003704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003706:	623a      	str	r2, [r7, #32]
 8003708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	69f9      	ldr	r1, [r7, #28]
 800370c:	6a3a      	ldr	r2, [r7, #32]
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	61bb      	str	r3, [r7, #24]
   return(result);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e5      	bne.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e00f      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4013      	ands	r3, r2
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	bf0c      	ite	eq
 8003746:	2301      	moveq	r3, #1
 8003748:	2300      	movne	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	429a      	cmp	r2, r3
 8003752:	d09f      	beq.n	8003694 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3740      	adds	r7, #64	; 0x40
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b0c0      	sub	sp, #256	; 0x100
 8003766:	af00      	add	r7, sp, #0
 8003768:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377c:	68d9      	ldr	r1, [r3, #12]
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	ea40 0301 	orr.w	r3, r0, r1
 8003788:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	431a      	orrs	r2, r3
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	431a      	orrs	r2, r3
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037b8:	f021 010c 	bic.w	r1, r1, #12
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037c6:	430b      	orrs	r3, r1
 80037c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037da:	6999      	ldr	r1, [r3, #24]
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	ea40 0301 	orr.w	r3, r0, r1
 80037e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b8f      	ldr	r3, [pc, #572]	; (8003a2c <UART_SetConfig+0x2cc>)
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d005      	beq.n	8003800 <UART_SetConfig+0xa0>
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b8d      	ldr	r3, [pc, #564]	; (8003a30 <UART_SetConfig+0x2d0>)
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d104      	bne.n	800380a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7fe fede 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8003804:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003808:	e003      	b.n	8003812 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800380a:	f7fe fec5 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 800380e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800381c:	f040 810c 	bne.w	8003a38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003824:	2200      	movs	r2, #0
 8003826:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800382a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800382e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003832:	4622      	mov	r2, r4
 8003834:	462b      	mov	r3, r5
 8003836:	1891      	adds	r1, r2, r2
 8003838:	65b9      	str	r1, [r7, #88]	; 0x58
 800383a:	415b      	adcs	r3, r3
 800383c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800383e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003842:	4621      	mov	r1, r4
 8003844:	eb12 0801 	adds.w	r8, r2, r1
 8003848:	4629      	mov	r1, r5
 800384a:	eb43 0901 	adc.w	r9, r3, r1
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800385a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800385e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003862:	4690      	mov	r8, r2
 8003864:	4699      	mov	r9, r3
 8003866:	4623      	mov	r3, r4
 8003868:	eb18 0303 	adds.w	r3, r8, r3
 800386c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003870:	462b      	mov	r3, r5
 8003872:	eb49 0303 	adc.w	r3, r9, r3
 8003876:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800387a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003886:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800388a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800388e:	460b      	mov	r3, r1
 8003890:	18db      	adds	r3, r3, r3
 8003892:	653b      	str	r3, [r7, #80]	; 0x50
 8003894:	4613      	mov	r3, r2
 8003896:	eb42 0303 	adc.w	r3, r2, r3
 800389a:	657b      	str	r3, [r7, #84]	; 0x54
 800389c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038a4:	f7fc fd04 	bl	80002b0 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4b61      	ldr	r3, [pc, #388]	; (8003a34 <UART_SetConfig+0x2d4>)
 80038ae:	fba3 2302 	umull	r2, r3, r3, r2
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	011c      	lsls	r4, r3, #4
 80038b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	1891      	adds	r1, r2, r2
 80038ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80038d0:	415b      	adcs	r3, r3
 80038d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038d8:	4641      	mov	r1, r8
 80038da:	eb12 0a01 	adds.w	sl, r2, r1
 80038de:	4649      	mov	r1, r9
 80038e0:	eb43 0b01 	adc.w	fp, r3, r1
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038f8:	4692      	mov	sl, r2
 80038fa:	469b      	mov	fp, r3
 80038fc:	4643      	mov	r3, r8
 80038fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003902:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003906:	464b      	mov	r3, r9
 8003908:	eb4b 0303 	adc.w	r3, fp, r3
 800390c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800391c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003920:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003924:	460b      	mov	r3, r1
 8003926:	18db      	adds	r3, r3, r3
 8003928:	643b      	str	r3, [r7, #64]	; 0x40
 800392a:	4613      	mov	r3, r2
 800392c:	eb42 0303 	adc.w	r3, r2, r3
 8003930:	647b      	str	r3, [r7, #68]	; 0x44
 8003932:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003936:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800393a:	f7fc fcb9 	bl	80002b0 <__aeabi_uldivmod>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4611      	mov	r1, r2
 8003944:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <UART_SetConfig+0x2d4>)
 8003946:	fba3 2301 	umull	r2, r3, r3, r1
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2264      	movs	r2, #100	; 0x64
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	1acb      	subs	r3, r1, r3
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800395a:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <UART_SetConfig+0x2d4>)
 800395c:	fba3 2302 	umull	r2, r3, r3, r2
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003968:	441c      	add	r4, r3
 800396a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003974:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003978:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800397c:	4642      	mov	r2, r8
 800397e:	464b      	mov	r3, r9
 8003980:	1891      	adds	r1, r2, r2
 8003982:	63b9      	str	r1, [r7, #56]	; 0x38
 8003984:	415b      	adcs	r3, r3
 8003986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003988:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800398c:	4641      	mov	r1, r8
 800398e:	1851      	adds	r1, r2, r1
 8003990:	6339      	str	r1, [r7, #48]	; 0x30
 8003992:	4649      	mov	r1, r9
 8003994:	414b      	adcs	r3, r1
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039a4:	4659      	mov	r1, fp
 80039a6:	00cb      	lsls	r3, r1, #3
 80039a8:	4651      	mov	r1, sl
 80039aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ae:	4651      	mov	r1, sl
 80039b0:	00ca      	lsls	r2, r1, #3
 80039b2:	4610      	mov	r0, r2
 80039b4:	4619      	mov	r1, r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	4642      	mov	r2, r8
 80039ba:	189b      	adds	r3, r3, r2
 80039bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039c0:	464b      	mov	r3, r9
 80039c2:	460a      	mov	r2, r1
 80039c4:	eb42 0303 	adc.w	r3, r2, r3
 80039c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039e0:	460b      	mov	r3, r1
 80039e2:	18db      	adds	r3, r3, r3
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e6:	4613      	mov	r3, r2
 80039e8:	eb42 0303 	adc.w	r3, r2, r3
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039f6:	f7fc fc5b 	bl	80002b0 <__aeabi_uldivmod>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <UART_SetConfig+0x2d4>)
 8003a00:	fba3 1302 	umull	r1, r3, r3, r2
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	2164      	movs	r1, #100	; 0x64
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	3332      	adds	r3, #50	; 0x32
 8003a12:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <UART_SetConfig+0x2d4>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	f003 0207 	and.w	r2, r3, #7
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4422      	add	r2, r4
 8003a26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a28:	e106      	b.n	8003c38 <UART_SetConfig+0x4d8>
 8003a2a:	bf00      	nop
 8003a2c:	40011000 	.word	0x40011000
 8003a30:	40011400 	.word	0x40011400
 8003a34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a4a:	4642      	mov	r2, r8
 8003a4c:	464b      	mov	r3, r9
 8003a4e:	1891      	adds	r1, r2, r2
 8003a50:	6239      	str	r1, [r7, #32]
 8003a52:	415b      	adcs	r3, r3
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
 8003a56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	1854      	adds	r4, r2, r1
 8003a5e:	4649      	mov	r1, r9
 8003a60:	eb43 0501 	adc.w	r5, r3, r1
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	00eb      	lsls	r3, r5, #3
 8003a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a72:	00e2      	lsls	r2, r4, #3
 8003a74:	4614      	mov	r4, r2
 8003a76:	461d      	mov	r5, r3
 8003a78:	4643      	mov	r3, r8
 8003a7a:	18e3      	adds	r3, r4, r3
 8003a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a80:	464b      	mov	r3, r9
 8003a82:	eb45 0303 	adc.w	r3, r5, r3
 8003a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	008b      	lsls	r3, r1, #2
 8003aaa:	4621      	mov	r1, r4
 8003aac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	008a      	lsls	r2, r1, #2
 8003ab4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ab8:	f7fc fbfa 	bl	80002b0 <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4b60      	ldr	r3, [pc, #384]	; (8003c44 <UART_SetConfig+0x4e4>)
 8003ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	011c      	lsls	r4, r3, #4
 8003aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ad4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ad8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003adc:	4642      	mov	r2, r8
 8003ade:	464b      	mov	r3, r9
 8003ae0:	1891      	adds	r1, r2, r2
 8003ae2:	61b9      	str	r1, [r7, #24]
 8003ae4:	415b      	adcs	r3, r3
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aec:	4641      	mov	r1, r8
 8003aee:	1851      	adds	r1, r2, r1
 8003af0:	6139      	str	r1, [r7, #16]
 8003af2:	4649      	mov	r1, r9
 8003af4:	414b      	adcs	r3, r1
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b04:	4659      	mov	r1, fp
 8003b06:	00cb      	lsls	r3, r1, #3
 8003b08:	4651      	mov	r1, sl
 8003b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b0e:	4651      	mov	r1, sl
 8003b10:	00ca      	lsls	r2, r1, #3
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	4642      	mov	r2, r8
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b20:	464b      	mov	r3, r9
 8003b22:	460a      	mov	r2, r1
 8003b24:	eb42 0303 	adc.w	r3, r2, r3
 8003b28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b44:	4649      	mov	r1, r9
 8003b46:	008b      	lsls	r3, r1, #2
 8003b48:	4641      	mov	r1, r8
 8003b4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b4e:	4641      	mov	r1, r8
 8003b50:	008a      	lsls	r2, r1, #2
 8003b52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b56:	f7fc fbab 	bl	80002b0 <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4b38      	ldr	r3, [pc, #224]	; (8003c44 <UART_SetConfig+0x4e4>)
 8003b62:	fba3 2301 	umull	r2, r3, r3, r1
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2264      	movs	r2, #100	; 0x64
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	1acb      	subs	r3, r1, r3
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	3332      	adds	r3, #50	; 0x32
 8003b74:	4a33      	ldr	r2, [pc, #204]	; (8003c44 <UART_SetConfig+0x4e4>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b80:	441c      	add	r4, r3
 8003b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b86:	2200      	movs	r2, #0
 8003b88:	673b      	str	r3, [r7, #112]	; 0x70
 8003b8a:	677a      	str	r2, [r7, #116]	; 0x74
 8003b8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b90:	4642      	mov	r2, r8
 8003b92:	464b      	mov	r3, r9
 8003b94:	1891      	adds	r1, r2, r2
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	415b      	adcs	r3, r3
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	1851      	adds	r1, r2, r1
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	414b      	adcs	r3, r1
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bb8:	4659      	mov	r1, fp
 8003bba:	00cb      	lsls	r3, r1, #3
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	00ca      	lsls	r2, r1, #3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4642      	mov	r2, r8
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	eb42 0303 	adc.w	r3, r2, r3
 8003bda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	663b      	str	r3, [r7, #96]	; 0x60
 8003be6:	667a      	str	r2, [r7, #100]	; 0x64
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	008b      	lsls	r3, r1, #2
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bfe:	4641      	mov	r1, r8
 8003c00:	008a      	lsls	r2, r1, #2
 8003c02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c06:	f7fc fb53 	bl	80002b0 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <UART_SetConfig+0x4e4>)
 8003c10:	fba3 1302 	umull	r1, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	2164      	movs	r1, #100	; 0x64
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	3332      	adds	r3, #50	; 0x32
 8003c22:	4a08      	ldr	r2, [pc, #32]	; (8003c44 <UART_SetConfig+0x4e4>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	f003 020f 	and.w	r2, r3, #15
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4422      	add	r2, r4
 8003c36:	609a      	str	r2, [r3, #8]
}
 8003c38:	bf00      	nop
 8003c3a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c44:	51eb851f 	.word	0x51eb851f

08003c48 <srand>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <srand+0x44>)
 8003c4c:	681d      	ldr	r5, [r3, #0]
 8003c4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003c50:	4604      	mov	r4, r0
 8003c52:	b9b3      	cbnz	r3, 8003c82 <srand+0x3a>
 8003c54:	2018      	movs	r0, #24
 8003c56:	f000 fa4f 	bl	80040f8 <malloc>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	6328      	str	r0, [r5, #48]	; 0x30
 8003c5e:	b920      	cbnz	r0, 8003c6a <srand+0x22>
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <srand+0x48>)
 8003c62:	480c      	ldr	r0, [pc, #48]	; (8003c94 <srand+0x4c>)
 8003c64:	2146      	movs	r1, #70	; 0x46
 8003c66:	f000 f9dd 	bl	8004024 <__assert_func>
 8003c6a:	490b      	ldr	r1, [pc, #44]	; (8003c98 <srand+0x50>)
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <srand+0x54>)
 8003c6e:	e9c0 1300 	strd	r1, r3, [r0]
 8003c72:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <srand+0x58>)
 8003c74:	6083      	str	r3, [r0, #8]
 8003c76:	230b      	movs	r3, #11
 8003c78:	8183      	strh	r3, [r0, #12]
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003c84:	2200      	movs	r2, #0
 8003c86:	611c      	str	r4, [r3, #16]
 8003c88:	615a      	str	r2, [r3, #20]
 8003c8a:	bd38      	pop	{r3, r4, r5, pc}
 8003c8c:	20000064 	.word	0x20000064
 8003c90:	08004ca0 	.word	0x08004ca0
 8003c94:	08004cb7 	.word	0x08004cb7
 8003c98:	abcd330e 	.word	0xabcd330e
 8003c9c:	e66d1234 	.word	0xe66d1234
 8003ca0:	0005deec 	.word	0x0005deec

08003ca4 <rand>:
 8003ca4:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <rand+0x5c>)
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	681c      	ldr	r4, [r3, #0]
 8003caa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003cac:	b9b3      	cbnz	r3, 8003cdc <rand+0x38>
 8003cae:	2018      	movs	r0, #24
 8003cb0:	f000 fa22 	bl	80040f8 <malloc>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6320      	str	r0, [r4, #48]	; 0x30
 8003cb8:	b920      	cbnz	r0, 8003cc4 <rand+0x20>
 8003cba:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <rand+0x60>)
 8003cbc:	4812      	ldr	r0, [pc, #72]	; (8003d08 <rand+0x64>)
 8003cbe:	2152      	movs	r1, #82	; 0x52
 8003cc0:	f000 f9b0 	bl	8004024 <__assert_func>
 8003cc4:	4911      	ldr	r1, [pc, #68]	; (8003d0c <rand+0x68>)
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <rand+0x6c>)
 8003cc8:	e9c0 1300 	strd	r1, r3, [r0]
 8003ccc:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <rand+0x70>)
 8003cce:	6083      	str	r3, [r0, #8]
 8003cd0:	230b      	movs	r3, #11
 8003cd2:	8183      	strh	r3, [r0, #12]
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003cdc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003cde:	480e      	ldr	r0, [pc, #56]	; (8003d18 <rand+0x74>)
 8003ce0:	690b      	ldr	r3, [r1, #16]
 8003ce2:	694c      	ldr	r4, [r1, #20]
 8003ce4:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <rand+0x78>)
 8003ce6:	4358      	muls	r0, r3
 8003ce8:	fb02 0004 	mla	r0, r2, r4, r0
 8003cec:	fba3 3202 	umull	r3, r2, r3, r2
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	eb40 0002 	adc.w	r0, r0, r2
 8003cf6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003cfa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003cfe:	bd10      	pop	{r4, pc}
 8003d00:	20000064 	.word	0x20000064
 8003d04:	08004ca0 	.word	0x08004ca0
 8003d08:	08004cb7 	.word	0x08004cb7
 8003d0c:	abcd330e 	.word	0xabcd330e
 8003d10:	e66d1234 	.word	0xe66d1234
 8003d14:	0005deec 	.word	0x0005deec
 8003d18:	5851f42d 	.word	0x5851f42d
 8003d1c:	4c957f2d 	.word	0x4c957f2d

08003d20 <std>:
 8003d20:	2300      	movs	r3, #0
 8003d22:	b510      	push	{r4, lr}
 8003d24:	4604      	mov	r4, r0
 8003d26:	e9c0 3300 	strd	r3, r3, [r0]
 8003d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d2e:	6083      	str	r3, [r0, #8]
 8003d30:	8181      	strh	r1, [r0, #12]
 8003d32:	6643      	str	r3, [r0, #100]	; 0x64
 8003d34:	81c2      	strh	r2, [r0, #14]
 8003d36:	6183      	str	r3, [r0, #24]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	305c      	adds	r0, #92	; 0x5c
 8003d3e:	f000 f8f4 	bl	8003f2a <memset>
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <std+0x58>)
 8003d44:	6263      	str	r3, [r4, #36]	; 0x24
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <std+0x5c>)
 8003d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <std+0x60>)
 8003d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <std+0x64>)
 8003d50:	6323      	str	r3, [r4, #48]	; 0x30
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <std+0x68>)
 8003d54:	6224      	str	r4, [r4, #32]
 8003d56:	429c      	cmp	r4, r3
 8003d58:	d006      	beq.n	8003d68 <std+0x48>
 8003d5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003d5e:	4294      	cmp	r4, r2
 8003d60:	d002      	beq.n	8003d68 <std+0x48>
 8003d62:	33d0      	adds	r3, #208	; 0xd0
 8003d64:	429c      	cmp	r4, r3
 8003d66:	d105      	bne.n	8003d74 <std+0x54>
 8003d68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d70:	f000 b954 	b.w	800401c <__retarget_lock_init_recursive>
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	bf00      	nop
 8003d78:	08003ea5 	.word	0x08003ea5
 8003d7c:	08003ec7 	.word	0x08003ec7
 8003d80:	08003eff 	.word	0x08003eff
 8003d84:	08003f23 	.word	0x08003f23
 8003d88:	2000020c 	.word	0x2000020c

08003d8c <stdio_exit_handler>:
 8003d8c:	4a02      	ldr	r2, [pc, #8]	; (8003d98 <stdio_exit_handler+0xc>)
 8003d8e:	4903      	ldr	r1, [pc, #12]	; (8003d9c <stdio_exit_handler+0x10>)
 8003d90:	4803      	ldr	r0, [pc, #12]	; (8003da0 <stdio_exit_handler+0x14>)
 8003d92:	f000 b869 	b.w	8003e68 <_fwalk_sglue>
 8003d96:	bf00      	nop
 8003d98:	2000000c 	.word	0x2000000c
 8003d9c:	0800436d 	.word	0x0800436d
 8003da0:	20000018 	.word	0x20000018

08003da4 <cleanup_stdio>:
 8003da4:	6841      	ldr	r1, [r0, #4]
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <cleanup_stdio+0x34>)
 8003da8:	4299      	cmp	r1, r3
 8003daa:	b510      	push	{r4, lr}
 8003dac:	4604      	mov	r4, r0
 8003dae:	d001      	beq.n	8003db4 <cleanup_stdio+0x10>
 8003db0:	f000 fadc 	bl	800436c <_fflush_r>
 8003db4:	68a1      	ldr	r1, [r4, #8]
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <cleanup_stdio+0x38>)
 8003db8:	4299      	cmp	r1, r3
 8003dba:	d002      	beq.n	8003dc2 <cleanup_stdio+0x1e>
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f000 fad5 	bl	800436c <_fflush_r>
 8003dc2:	68e1      	ldr	r1, [r4, #12]
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <cleanup_stdio+0x3c>)
 8003dc6:	4299      	cmp	r1, r3
 8003dc8:	d004      	beq.n	8003dd4 <cleanup_stdio+0x30>
 8003dca:	4620      	mov	r0, r4
 8003dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dd0:	f000 bacc 	b.w	800436c <_fflush_r>
 8003dd4:	bd10      	pop	{r4, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000020c 	.word	0x2000020c
 8003ddc:	20000274 	.word	0x20000274
 8003de0:	200002dc 	.word	0x200002dc

08003de4 <global_stdio_init.part.0>:
 8003de4:	b510      	push	{r4, lr}
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <global_stdio_init.part.0+0x30>)
 8003de8:	4c0b      	ldr	r4, [pc, #44]	; (8003e18 <global_stdio_init.part.0+0x34>)
 8003dea:	4a0c      	ldr	r2, [pc, #48]	; (8003e1c <global_stdio_init.part.0+0x38>)
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	4620      	mov	r0, r4
 8003df0:	2200      	movs	r2, #0
 8003df2:	2104      	movs	r1, #4
 8003df4:	f7ff ff94 	bl	8003d20 <std>
 8003df8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	2109      	movs	r1, #9
 8003e00:	f7ff ff8e 	bl	8003d20 <std>
 8003e04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003e08:	2202      	movs	r2, #2
 8003e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e0e:	2112      	movs	r1, #18
 8003e10:	f7ff bf86 	b.w	8003d20 <std>
 8003e14:	20000344 	.word	0x20000344
 8003e18:	2000020c 	.word	0x2000020c
 8003e1c:	08003d8d 	.word	0x08003d8d

08003e20 <__sfp_lock_acquire>:
 8003e20:	4801      	ldr	r0, [pc, #4]	; (8003e28 <__sfp_lock_acquire+0x8>)
 8003e22:	f000 b8fc 	b.w	800401e <__retarget_lock_acquire_recursive>
 8003e26:	bf00      	nop
 8003e28:	2000034d 	.word	0x2000034d

08003e2c <__sfp_lock_release>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	; (8003e34 <__sfp_lock_release+0x8>)
 8003e2e:	f000 b8f7 	b.w	8004020 <__retarget_lock_release_recursive>
 8003e32:	bf00      	nop
 8003e34:	2000034d 	.word	0x2000034d

08003e38 <__sinit>:
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	f7ff fff0 	bl	8003e20 <__sfp_lock_acquire>
 8003e40:	6a23      	ldr	r3, [r4, #32]
 8003e42:	b11b      	cbz	r3, 8003e4c <__sinit+0x14>
 8003e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e48:	f7ff bff0 	b.w	8003e2c <__sfp_lock_release>
 8003e4c:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <__sinit+0x28>)
 8003e4e:	6223      	str	r3, [r4, #32]
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <__sinit+0x2c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f5      	bne.n	8003e44 <__sinit+0xc>
 8003e58:	f7ff ffc4 	bl	8003de4 <global_stdio_init.part.0>
 8003e5c:	e7f2      	b.n	8003e44 <__sinit+0xc>
 8003e5e:	bf00      	nop
 8003e60:	08003da5 	.word	0x08003da5
 8003e64:	20000344 	.word	0x20000344

08003e68 <_fwalk_sglue>:
 8003e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e6c:	4607      	mov	r7, r0
 8003e6e:	4688      	mov	r8, r1
 8003e70:	4614      	mov	r4, r2
 8003e72:	2600      	movs	r6, #0
 8003e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e78:	f1b9 0901 	subs.w	r9, r9, #1
 8003e7c:	d505      	bpl.n	8003e8a <_fwalk_sglue+0x22>
 8003e7e:	6824      	ldr	r4, [r4, #0]
 8003e80:	2c00      	cmp	r4, #0
 8003e82:	d1f7      	bne.n	8003e74 <_fwalk_sglue+0xc>
 8003e84:	4630      	mov	r0, r6
 8003e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e8a:	89ab      	ldrh	r3, [r5, #12]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d907      	bls.n	8003ea0 <_fwalk_sglue+0x38>
 8003e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e94:	3301      	adds	r3, #1
 8003e96:	d003      	beq.n	8003ea0 <_fwalk_sglue+0x38>
 8003e98:	4629      	mov	r1, r5
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	47c0      	blx	r8
 8003e9e:	4306      	orrs	r6, r0
 8003ea0:	3568      	adds	r5, #104	; 0x68
 8003ea2:	e7e9      	b.n	8003e78 <_fwalk_sglue+0x10>

08003ea4 <__sread>:
 8003ea4:	b510      	push	{r4, lr}
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eac:	f000 f868 	bl	8003f80 <_read_r>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	bfab      	itete	ge
 8003eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8003eb8:	181b      	addge	r3, r3, r0
 8003eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ebe:	bfac      	ite	ge
 8003ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ec2:	81a3      	strhlt	r3, [r4, #12]
 8003ec4:	bd10      	pop	{r4, pc}

08003ec6 <__swrite>:
 8003ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eca:	461f      	mov	r7, r3
 8003ecc:	898b      	ldrh	r3, [r1, #12]
 8003ece:	05db      	lsls	r3, r3, #23
 8003ed0:	4605      	mov	r5, r0
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	d505      	bpl.n	8003ee4 <__swrite+0x1e>
 8003ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003edc:	2302      	movs	r3, #2
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f000 f83c 	bl	8003f5c <_lseek_r>
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eee:	81a3      	strh	r3, [r4, #12]
 8003ef0:	4632      	mov	r2, r6
 8003ef2:	463b      	mov	r3, r7
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003efa:	f000 b853 	b.w	8003fa4 <_write_r>

08003efe <__sseek>:
 8003efe:	b510      	push	{r4, lr}
 8003f00:	460c      	mov	r4, r1
 8003f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f06:	f000 f829 	bl	8003f5c <_lseek_r>
 8003f0a:	1c43      	adds	r3, r0, #1
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	bf15      	itete	ne
 8003f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f1a:	81a3      	strheq	r3, [r4, #12]
 8003f1c:	bf18      	it	ne
 8003f1e:	81a3      	strhne	r3, [r4, #12]
 8003f20:	bd10      	pop	{r4, pc}

08003f22 <__sclose>:
 8003f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f26:	f000 b809 	b.w	8003f3c <_close_r>

08003f2a <memset>:
 8003f2a:	4402      	add	r2, r0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d100      	bne.n	8003f34 <memset+0xa>
 8003f32:	4770      	bx	lr
 8003f34:	f803 1b01 	strb.w	r1, [r3], #1
 8003f38:	e7f9      	b.n	8003f2e <memset+0x4>
	...

08003f3c <_close_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4d06      	ldr	r5, [pc, #24]	; (8003f58 <_close_r+0x1c>)
 8003f40:	2300      	movs	r3, #0
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	602b      	str	r3, [r5, #0]
 8003f48:	f7fd fa53 	bl	80013f2 <_close>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_close_r+0x1a>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_close_r+0x1a>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	20000348 	.word	0x20000348

08003f5c <_lseek_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4d07      	ldr	r5, [pc, #28]	; (8003f7c <_lseek_r+0x20>)
 8003f60:	4604      	mov	r4, r0
 8003f62:	4608      	mov	r0, r1
 8003f64:	4611      	mov	r1, r2
 8003f66:	2200      	movs	r2, #0
 8003f68:	602a      	str	r2, [r5, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f7fd fa68 	bl	8001440 <_lseek>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d102      	bne.n	8003f7a <_lseek_r+0x1e>
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	b103      	cbz	r3, 8003f7a <_lseek_r+0x1e>
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	20000348 	.word	0x20000348

08003f80 <_read_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d07      	ldr	r5, [pc, #28]	; (8003fa0 <_read_r+0x20>)
 8003f84:	4604      	mov	r4, r0
 8003f86:	4608      	mov	r0, r1
 8003f88:	4611      	mov	r1, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f7fd f9f6 	bl	8001380 <_read>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_read_r+0x1e>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_read_r+0x1e>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	20000348 	.word	0x20000348

08003fa4 <_write_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d07      	ldr	r5, [pc, #28]	; (8003fc4 <_write_r+0x20>)
 8003fa8:	4604      	mov	r4, r0
 8003faa:	4608      	mov	r0, r1
 8003fac:	4611      	mov	r1, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	602a      	str	r2, [r5, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7fd fa01 	bl	80013ba <_write>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_write_r+0x1e>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_write_r+0x1e>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	20000348 	.word	0x20000348

08003fc8 <__errno>:
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <__errno+0x8>)
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000064 	.word	0x20000064

08003fd4 <__libc_init_array>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4d0d      	ldr	r5, [pc, #52]	; (800400c <__libc_init_array+0x38>)
 8003fd8:	4c0d      	ldr	r4, [pc, #52]	; (8004010 <__libc_init_array+0x3c>)
 8003fda:	1b64      	subs	r4, r4, r5
 8003fdc:	10a4      	asrs	r4, r4, #2
 8003fde:	2600      	movs	r6, #0
 8003fe0:	42a6      	cmp	r6, r4
 8003fe2:	d109      	bne.n	8003ff8 <__libc_init_array+0x24>
 8003fe4:	4d0b      	ldr	r5, [pc, #44]	; (8004014 <__libc_init_array+0x40>)
 8003fe6:	4c0c      	ldr	r4, [pc, #48]	; (8004018 <__libc_init_array+0x44>)
 8003fe8:	f000 fe42 	bl	8004c70 <_init>
 8003fec:	1b64      	subs	r4, r4, r5
 8003fee:	10a4      	asrs	r4, r4, #2
 8003ff0:	2600      	movs	r6, #0
 8003ff2:	42a6      	cmp	r6, r4
 8003ff4:	d105      	bne.n	8004002 <__libc_init_array+0x2e>
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffc:	4798      	blx	r3
 8003ffe:	3601      	adds	r6, #1
 8004000:	e7ee      	b.n	8003fe0 <__libc_init_array+0xc>
 8004002:	f855 3b04 	ldr.w	r3, [r5], #4
 8004006:	4798      	blx	r3
 8004008:	3601      	adds	r6, #1
 800400a:	e7f2      	b.n	8003ff2 <__libc_init_array+0x1e>
 800400c:	08004d88 	.word	0x08004d88
 8004010:	08004d88 	.word	0x08004d88
 8004014:	08004d88 	.word	0x08004d88
 8004018:	08004d90 	.word	0x08004d90

0800401c <__retarget_lock_init_recursive>:
 800401c:	4770      	bx	lr

0800401e <__retarget_lock_acquire_recursive>:
 800401e:	4770      	bx	lr

08004020 <__retarget_lock_release_recursive>:
 8004020:	4770      	bx	lr
	...

08004024 <__assert_func>:
 8004024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004026:	4614      	mov	r4, r2
 8004028:	461a      	mov	r2, r3
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <__assert_func+0x2c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4605      	mov	r5, r0
 8004030:	68d8      	ldr	r0, [r3, #12]
 8004032:	b14c      	cbz	r4, 8004048 <__assert_func+0x24>
 8004034:	4b07      	ldr	r3, [pc, #28]	; (8004054 <__assert_func+0x30>)
 8004036:	9100      	str	r1, [sp, #0]
 8004038:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800403c:	4906      	ldr	r1, [pc, #24]	; (8004058 <__assert_func+0x34>)
 800403e:	462b      	mov	r3, r5
 8004040:	f000 f9bc 	bl	80043bc <fiprintf>
 8004044:	f000 f9dc 	bl	8004400 <abort>
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <__assert_func+0x38>)
 800404a:	461c      	mov	r4, r3
 800404c:	e7f3      	b.n	8004036 <__assert_func+0x12>
 800404e:	bf00      	nop
 8004050:	20000064 	.word	0x20000064
 8004054:	08004d0f 	.word	0x08004d0f
 8004058:	08004d1c 	.word	0x08004d1c
 800405c:	08004d4a 	.word	0x08004d4a

08004060 <_free_r>:
 8004060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004062:	2900      	cmp	r1, #0
 8004064:	d044      	beq.n	80040f0 <_free_r+0x90>
 8004066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800406a:	9001      	str	r0, [sp, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f1a1 0404 	sub.w	r4, r1, #4
 8004072:	bfb8      	it	lt
 8004074:	18e4      	addlt	r4, r4, r3
 8004076:	f000 f8e7 	bl	8004248 <__malloc_lock>
 800407a:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <_free_r+0x94>)
 800407c:	9801      	ldr	r0, [sp, #4]
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	b933      	cbnz	r3, 8004090 <_free_r+0x30>
 8004082:	6063      	str	r3, [r4, #4]
 8004084:	6014      	str	r4, [r2, #0]
 8004086:	b003      	add	sp, #12
 8004088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800408c:	f000 b8e2 	b.w	8004254 <__malloc_unlock>
 8004090:	42a3      	cmp	r3, r4
 8004092:	d908      	bls.n	80040a6 <_free_r+0x46>
 8004094:	6825      	ldr	r5, [r4, #0]
 8004096:	1961      	adds	r1, r4, r5
 8004098:	428b      	cmp	r3, r1
 800409a:	bf01      	itttt	eq
 800409c:	6819      	ldreq	r1, [r3, #0]
 800409e:	685b      	ldreq	r3, [r3, #4]
 80040a0:	1949      	addeq	r1, r1, r5
 80040a2:	6021      	streq	r1, [r4, #0]
 80040a4:	e7ed      	b.n	8004082 <_free_r+0x22>
 80040a6:	461a      	mov	r2, r3
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	b10b      	cbz	r3, 80040b0 <_free_r+0x50>
 80040ac:	42a3      	cmp	r3, r4
 80040ae:	d9fa      	bls.n	80040a6 <_free_r+0x46>
 80040b0:	6811      	ldr	r1, [r2, #0]
 80040b2:	1855      	adds	r5, r2, r1
 80040b4:	42a5      	cmp	r5, r4
 80040b6:	d10b      	bne.n	80040d0 <_free_r+0x70>
 80040b8:	6824      	ldr	r4, [r4, #0]
 80040ba:	4421      	add	r1, r4
 80040bc:	1854      	adds	r4, r2, r1
 80040be:	42a3      	cmp	r3, r4
 80040c0:	6011      	str	r1, [r2, #0]
 80040c2:	d1e0      	bne.n	8004086 <_free_r+0x26>
 80040c4:	681c      	ldr	r4, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	6053      	str	r3, [r2, #4]
 80040ca:	440c      	add	r4, r1
 80040cc:	6014      	str	r4, [r2, #0]
 80040ce:	e7da      	b.n	8004086 <_free_r+0x26>
 80040d0:	d902      	bls.n	80040d8 <_free_r+0x78>
 80040d2:	230c      	movs	r3, #12
 80040d4:	6003      	str	r3, [r0, #0]
 80040d6:	e7d6      	b.n	8004086 <_free_r+0x26>
 80040d8:	6825      	ldr	r5, [r4, #0]
 80040da:	1961      	adds	r1, r4, r5
 80040dc:	428b      	cmp	r3, r1
 80040de:	bf04      	itt	eq
 80040e0:	6819      	ldreq	r1, [r3, #0]
 80040e2:	685b      	ldreq	r3, [r3, #4]
 80040e4:	6063      	str	r3, [r4, #4]
 80040e6:	bf04      	itt	eq
 80040e8:	1949      	addeq	r1, r1, r5
 80040ea:	6021      	streq	r1, [r4, #0]
 80040ec:	6054      	str	r4, [r2, #4]
 80040ee:	e7ca      	b.n	8004086 <_free_r+0x26>
 80040f0:	b003      	add	sp, #12
 80040f2:	bd30      	pop	{r4, r5, pc}
 80040f4:	20000350 	.word	0x20000350

080040f8 <malloc>:
 80040f8:	4b02      	ldr	r3, [pc, #8]	; (8004104 <malloc+0xc>)
 80040fa:	4601      	mov	r1, r0
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	f000 b823 	b.w	8004148 <_malloc_r>
 8004102:	bf00      	nop
 8004104:	20000064 	.word	0x20000064

08004108 <sbrk_aligned>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	4e0e      	ldr	r6, [pc, #56]	; (8004144 <sbrk_aligned+0x3c>)
 800410c:	460c      	mov	r4, r1
 800410e:	6831      	ldr	r1, [r6, #0]
 8004110:	4605      	mov	r5, r0
 8004112:	b911      	cbnz	r1, 800411a <sbrk_aligned+0x12>
 8004114:	f000 f964 	bl	80043e0 <_sbrk_r>
 8004118:	6030      	str	r0, [r6, #0]
 800411a:	4621      	mov	r1, r4
 800411c:	4628      	mov	r0, r5
 800411e:	f000 f95f 	bl	80043e0 <_sbrk_r>
 8004122:	1c43      	adds	r3, r0, #1
 8004124:	d00a      	beq.n	800413c <sbrk_aligned+0x34>
 8004126:	1cc4      	adds	r4, r0, #3
 8004128:	f024 0403 	bic.w	r4, r4, #3
 800412c:	42a0      	cmp	r0, r4
 800412e:	d007      	beq.n	8004140 <sbrk_aligned+0x38>
 8004130:	1a21      	subs	r1, r4, r0
 8004132:	4628      	mov	r0, r5
 8004134:	f000 f954 	bl	80043e0 <_sbrk_r>
 8004138:	3001      	adds	r0, #1
 800413a:	d101      	bne.n	8004140 <sbrk_aligned+0x38>
 800413c:	f04f 34ff 	mov.w	r4, #4294967295
 8004140:	4620      	mov	r0, r4
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	20000354 	.word	0x20000354

08004148 <_malloc_r>:
 8004148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800414c:	1ccd      	adds	r5, r1, #3
 800414e:	f025 0503 	bic.w	r5, r5, #3
 8004152:	3508      	adds	r5, #8
 8004154:	2d0c      	cmp	r5, #12
 8004156:	bf38      	it	cc
 8004158:	250c      	movcc	r5, #12
 800415a:	2d00      	cmp	r5, #0
 800415c:	4607      	mov	r7, r0
 800415e:	db01      	blt.n	8004164 <_malloc_r+0x1c>
 8004160:	42a9      	cmp	r1, r5
 8004162:	d905      	bls.n	8004170 <_malloc_r+0x28>
 8004164:	230c      	movs	r3, #12
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	2600      	movs	r6, #0
 800416a:	4630      	mov	r0, r6
 800416c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004170:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004244 <_malloc_r+0xfc>
 8004174:	f000 f868 	bl	8004248 <__malloc_lock>
 8004178:	f8d8 3000 	ldr.w	r3, [r8]
 800417c:	461c      	mov	r4, r3
 800417e:	bb5c      	cbnz	r4, 80041d8 <_malloc_r+0x90>
 8004180:	4629      	mov	r1, r5
 8004182:	4638      	mov	r0, r7
 8004184:	f7ff ffc0 	bl	8004108 <sbrk_aligned>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	4604      	mov	r4, r0
 800418c:	d155      	bne.n	800423a <_malloc_r+0xf2>
 800418e:	f8d8 4000 	ldr.w	r4, [r8]
 8004192:	4626      	mov	r6, r4
 8004194:	2e00      	cmp	r6, #0
 8004196:	d145      	bne.n	8004224 <_malloc_r+0xdc>
 8004198:	2c00      	cmp	r4, #0
 800419a:	d048      	beq.n	800422e <_malloc_r+0xe6>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	4631      	mov	r1, r6
 80041a0:	4638      	mov	r0, r7
 80041a2:	eb04 0903 	add.w	r9, r4, r3
 80041a6:	f000 f91b 	bl	80043e0 <_sbrk_r>
 80041aa:	4581      	cmp	r9, r0
 80041ac:	d13f      	bne.n	800422e <_malloc_r+0xe6>
 80041ae:	6821      	ldr	r1, [r4, #0]
 80041b0:	1a6d      	subs	r5, r5, r1
 80041b2:	4629      	mov	r1, r5
 80041b4:	4638      	mov	r0, r7
 80041b6:	f7ff ffa7 	bl	8004108 <sbrk_aligned>
 80041ba:	3001      	adds	r0, #1
 80041bc:	d037      	beq.n	800422e <_malloc_r+0xe6>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	442b      	add	r3, r5
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	f8d8 3000 	ldr.w	r3, [r8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d038      	beq.n	800423e <_malloc_r+0xf6>
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	42a2      	cmp	r2, r4
 80041d0:	d12b      	bne.n	800422a <_malloc_r+0xe2>
 80041d2:	2200      	movs	r2, #0
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	e00f      	b.n	80041f8 <_malloc_r+0xb0>
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	1b52      	subs	r2, r2, r5
 80041dc:	d41f      	bmi.n	800421e <_malloc_r+0xd6>
 80041de:	2a0b      	cmp	r2, #11
 80041e0:	d917      	bls.n	8004212 <_malloc_r+0xca>
 80041e2:	1961      	adds	r1, r4, r5
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	6025      	str	r5, [r4, #0]
 80041e8:	bf18      	it	ne
 80041ea:	6059      	strne	r1, [r3, #4]
 80041ec:	6863      	ldr	r3, [r4, #4]
 80041ee:	bf08      	it	eq
 80041f0:	f8c8 1000 	streq.w	r1, [r8]
 80041f4:	5162      	str	r2, [r4, r5]
 80041f6:	604b      	str	r3, [r1, #4]
 80041f8:	4638      	mov	r0, r7
 80041fa:	f104 060b 	add.w	r6, r4, #11
 80041fe:	f000 f829 	bl	8004254 <__malloc_unlock>
 8004202:	f026 0607 	bic.w	r6, r6, #7
 8004206:	1d23      	adds	r3, r4, #4
 8004208:	1af2      	subs	r2, r6, r3
 800420a:	d0ae      	beq.n	800416a <_malloc_r+0x22>
 800420c:	1b9b      	subs	r3, r3, r6
 800420e:	50a3      	str	r3, [r4, r2]
 8004210:	e7ab      	b.n	800416a <_malloc_r+0x22>
 8004212:	42a3      	cmp	r3, r4
 8004214:	6862      	ldr	r2, [r4, #4]
 8004216:	d1dd      	bne.n	80041d4 <_malloc_r+0x8c>
 8004218:	f8c8 2000 	str.w	r2, [r8]
 800421c:	e7ec      	b.n	80041f8 <_malloc_r+0xb0>
 800421e:	4623      	mov	r3, r4
 8004220:	6864      	ldr	r4, [r4, #4]
 8004222:	e7ac      	b.n	800417e <_malloc_r+0x36>
 8004224:	4634      	mov	r4, r6
 8004226:	6876      	ldr	r6, [r6, #4]
 8004228:	e7b4      	b.n	8004194 <_malloc_r+0x4c>
 800422a:	4613      	mov	r3, r2
 800422c:	e7cc      	b.n	80041c8 <_malloc_r+0x80>
 800422e:	230c      	movs	r3, #12
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	4638      	mov	r0, r7
 8004234:	f000 f80e 	bl	8004254 <__malloc_unlock>
 8004238:	e797      	b.n	800416a <_malloc_r+0x22>
 800423a:	6025      	str	r5, [r4, #0]
 800423c:	e7dc      	b.n	80041f8 <_malloc_r+0xb0>
 800423e:	605b      	str	r3, [r3, #4]
 8004240:	deff      	udf	#255	; 0xff
 8004242:	bf00      	nop
 8004244:	20000350 	.word	0x20000350

08004248 <__malloc_lock>:
 8004248:	4801      	ldr	r0, [pc, #4]	; (8004250 <__malloc_lock+0x8>)
 800424a:	f7ff bee8 	b.w	800401e <__retarget_lock_acquire_recursive>
 800424e:	bf00      	nop
 8004250:	2000034c 	.word	0x2000034c

08004254 <__malloc_unlock>:
 8004254:	4801      	ldr	r0, [pc, #4]	; (800425c <__malloc_unlock+0x8>)
 8004256:	f7ff bee3 	b.w	8004020 <__retarget_lock_release_recursive>
 800425a:	bf00      	nop
 800425c:	2000034c 	.word	0x2000034c

08004260 <__sflush_r>:
 8004260:	898a      	ldrh	r2, [r1, #12]
 8004262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004266:	4605      	mov	r5, r0
 8004268:	0710      	lsls	r0, r2, #28
 800426a:	460c      	mov	r4, r1
 800426c:	d458      	bmi.n	8004320 <__sflush_r+0xc0>
 800426e:	684b      	ldr	r3, [r1, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	dc05      	bgt.n	8004280 <__sflush_r+0x20>
 8004274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	dc02      	bgt.n	8004280 <__sflush_r+0x20>
 800427a:	2000      	movs	r0, #0
 800427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004282:	2e00      	cmp	r6, #0
 8004284:	d0f9      	beq.n	800427a <__sflush_r+0x1a>
 8004286:	2300      	movs	r3, #0
 8004288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800428c:	682f      	ldr	r7, [r5, #0]
 800428e:	6a21      	ldr	r1, [r4, #32]
 8004290:	602b      	str	r3, [r5, #0]
 8004292:	d032      	beq.n	80042fa <__sflush_r+0x9a>
 8004294:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	075a      	lsls	r2, r3, #29
 800429a:	d505      	bpl.n	80042a8 <__sflush_r+0x48>
 800429c:	6863      	ldr	r3, [r4, #4]
 800429e:	1ac0      	subs	r0, r0, r3
 80042a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042a2:	b10b      	cbz	r3, 80042a8 <__sflush_r+0x48>
 80042a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042a6:	1ac0      	subs	r0, r0, r3
 80042a8:	2300      	movs	r3, #0
 80042aa:	4602      	mov	r2, r0
 80042ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042ae:	6a21      	ldr	r1, [r4, #32]
 80042b0:	4628      	mov	r0, r5
 80042b2:	47b0      	blx	r6
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	d106      	bne.n	80042c8 <__sflush_r+0x68>
 80042ba:	6829      	ldr	r1, [r5, #0]
 80042bc:	291d      	cmp	r1, #29
 80042be:	d82b      	bhi.n	8004318 <__sflush_r+0xb8>
 80042c0:	4a29      	ldr	r2, [pc, #164]	; (8004368 <__sflush_r+0x108>)
 80042c2:	410a      	asrs	r2, r1
 80042c4:	07d6      	lsls	r6, r2, #31
 80042c6:	d427      	bmi.n	8004318 <__sflush_r+0xb8>
 80042c8:	2200      	movs	r2, #0
 80042ca:	6062      	str	r2, [r4, #4]
 80042cc:	04d9      	lsls	r1, r3, #19
 80042ce:	6922      	ldr	r2, [r4, #16]
 80042d0:	6022      	str	r2, [r4, #0]
 80042d2:	d504      	bpl.n	80042de <__sflush_r+0x7e>
 80042d4:	1c42      	adds	r2, r0, #1
 80042d6:	d101      	bne.n	80042dc <__sflush_r+0x7c>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b903      	cbnz	r3, 80042de <__sflush_r+0x7e>
 80042dc:	6560      	str	r0, [r4, #84]	; 0x54
 80042de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042e0:	602f      	str	r7, [r5, #0]
 80042e2:	2900      	cmp	r1, #0
 80042e4:	d0c9      	beq.n	800427a <__sflush_r+0x1a>
 80042e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042ea:	4299      	cmp	r1, r3
 80042ec:	d002      	beq.n	80042f4 <__sflush_r+0x94>
 80042ee:	4628      	mov	r0, r5
 80042f0:	f7ff feb6 	bl	8004060 <_free_r>
 80042f4:	2000      	movs	r0, #0
 80042f6:	6360      	str	r0, [r4, #52]	; 0x34
 80042f8:	e7c0      	b.n	800427c <__sflush_r+0x1c>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b0      	blx	r6
 8004300:	1c41      	adds	r1, r0, #1
 8004302:	d1c8      	bne.n	8004296 <__sflush_r+0x36>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0c5      	beq.n	8004296 <__sflush_r+0x36>
 800430a:	2b1d      	cmp	r3, #29
 800430c:	d001      	beq.n	8004312 <__sflush_r+0xb2>
 800430e:	2b16      	cmp	r3, #22
 8004310:	d101      	bne.n	8004316 <__sflush_r+0xb6>
 8004312:	602f      	str	r7, [r5, #0]
 8004314:	e7b1      	b.n	800427a <__sflush_r+0x1a>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	e7ad      	b.n	800427c <__sflush_r+0x1c>
 8004320:	690f      	ldr	r7, [r1, #16]
 8004322:	2f00      	cmp	r7, #0
 8004324:	d0a9      	beq.n	800427a <__sflush_r+0x1a>
 8004326:	0793      	lsls	r3, r2, #30
 8004328:	680e      	ldr	r6, [r1, #0]
 800432a:	bf08      	it	eq
 800432c:	694b      	ldreq	r3, [r1, #20]
 800432e:	600f      	str	r7, [r1, #0]
 8004330:	bf18      	it	ne
 8004332:	2300      	movne	r3, #0
 8004334:	eba6 0807 	sub.w	r8, r6, r7
 8004338:	608b      	str	r3, [r1, #8]
 800433a:	f1b8 0f00 	cmp.w	r8, #0
 800433e:	dd9c      	ble.n	800427a <__sflush_r+0x1a>
 8004340:	6a21      	ldr	r1, [r4, #32]
 8004342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004344:	4643      	mov	r3, r8
 8004346:	463a      	mov	r2, r7
 8004348:	4628      	mov	r0, r5
 800434a:	47b0      	blx	r6
 800434c:	2800      	cmp	r0, #0
 800434e:	dc06      	bgt.n	800435e <__sflush_r+0xfe>
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004356:	81a3      	strh	r3, [r4, #12]
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	e78e      	b.n	800427c <__sflush_r+0x1c>
 800435e:	4407      	add	r7, r0
 8004360:	eba8 0800 	sub.w	r8, r8, r0
 8004364:	e7e9      	b.n	800433a <__sflush_r+0xda>
 8004366:	bf00      	nop
 8004368:	dfbffffe 	.word	0xdfbffffe

0800436c <_fflush_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	690b      	ldr	r3, [r1, #16]
 8004370:	4605      	mov	r5, r0
 8004372:	460c      	mov	r4, r1
 8004374:	b913      	cbnz	r3, 800437c <_fflush_r+0x10>
 8004376:	2500      	movs	r5, #0
 8004378:	4628      	mov	r0, r5
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	b118      	cbz	r0, 8004386 <_fflush_r+0x1a>
 800437e:	6a03      	ldr	r3, [r0, #32]
 8004380:	b90b      	cbnz	r3, 8004386 <_fflush_r+0x1a>
 8004382:	f7ff fd59 	bl	8003e38 <__sinit>
 8004386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f3      	beq.n	8004376 <_fflush_r+0xa>
 800438e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004390:	07d0      	lsls	r0, r2, #31
 8004392:	d404      	bmi.n	800439e <_fflush_r+0x32>
 8004394:	0599      	lsls	r1, r3, #22
 8004396:	d402      	bmi.n	800439e <_fflush_r+0x32>
 8004398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800439a:	f7ff fe40 	bl	800401e <__retarget_lock_acquire_recursive>
 800439e:	4628      	mov	r0, r5
 80043a0:	4621      	mov	r1, r4
 80043a2:	f7ff ff5d 	bl	8004260 <__sflush_r>
 80043a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043a8:	07da      	lsls	r2, r3, #31
 80043aa:	4605      	mov	r5, r0
 80043ac:	d4e4      	bmi.n	8004378 <_fflush_r+0xc>
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	059b      	lsls	r3, r3, #22
 80043b2:	d4e1      	bmi.n	8004378 <_fflush_r+0xc>
 80043b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043b6:	f7ff fe33 	bl	8004020 <__retarget_lock_release_recursive>
 80043ba:	e7dd      	b.n	8004378 <_fflush_r+0xc>

080043bc <fiprintf>:
 80043bc:	b40e      	push	{r1, r2, r3}
 80043be:	b503      	push	{r0, r1, lr}
 80043c0:	4601      	mov	r1, r0
 80043c2:	ab03      	add	r3, sp, #12
 80043c4:	4805      	ldr	r0, [pc, #20]	; (80043dc <fiprintf+0x20>)
 80043c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ca:	6800      	ldr	r0, [r0, #0]
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	f000 f847 	bl	8004460 <_vfiprintf_r>
 80043d2:	b002      	add	sp, #8
 80043d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043d8:	b003      	add	sp, #12
 80043da:	4770      	bx	lr
 80043dc:	20000064 	.word	0x20000064

080043e0 <_sbrk_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	4d06      	ldr	r5, [pc, #24]	; (80043fc <_sbrk_r+0x1c>)
 80043e4:	2300      	movs	r3, #0
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	f7fd f836 	bl	800145c <_sbrk>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_sbrk_r+0x1a>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_sbrk_r+0x1a>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	20000348 	.word	0x20000348

08004400 <abort>:
 8004400:	b508      	push	{r3, lr}
 8004402:	2006      	movs	r0, #6
 8004404:	f000 fb94 	bl	8004b30 <raise>
 8004408:	2001      	movs	r0, #1
 800440a:	f7fc ffaf 	bl	800136c <_exit>

0800440e <__sfputc_r>:
 800440e:	6893      	ldr	r3, [r2, #8]
 8004410:	3b01      	subs	r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	b410      	push	{r4}
 8004416:	6093      	str	r3, [r2, #8]
 8004418:	da08      	bge.n	800442c <__sfputc_r+0x1e>
 800441a:	6994      	ldr	r4, [r2, #24]
 800441c:	42a3      	cmp	r3, r4
 800441e:	db01      	blt.n	8004424 <__sfputc_r+0x16>
 8004420:	290a      	cmp	r1, #10
 8004422:	d103      	bne.n	800442c <__sfputc_r+0x1e>
 8004424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004428:	f000 bac4 	b.w	80049b4 <__swbuf_r>
 800442c:	6813      	ldr	r3, [r2, #0]
 800442e:	1c58      	adds	r0, r3, #1
 8004430:	6010      	str	r0, [r2, #0]
 8004432:	7019      	strb	r1, [r3, #0]
 8004434:	4608      	mov	r0, r1
 8004436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800443a:	4770      	bx	lr

0800443c <__sfputs_r>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	4606      	mov	r6, r0
 8004440:	460f      	mov	r7, r1
 8004442:	4614      	mov	r4, r2
 8004444:	18d5      	adds	r5, r2, r3
 8004446:	42ac      	cmp	r4, r5
 8004448:	d101      	bne.n	800444e <__sfputs_r+0x12>
 800444a:	2000      	movs	r0, #0
 800444c:	e007      	b.n	800445e <__sfputs_r+0x22>
 800444e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004452:	463a      	mov	r2, r7
 8004454:	4630      	mov	r0, r6
 8004456:	f7ff ffda 	bl	800440e <__sfputc_r>
 800445a:	1c43      	adds	r3, r0, #1
 800445c:	d1f3      	bne.n	8004446 <__sfputs_r+0xa>
 800445e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004460 <_vfiprintf_r>:
 8004460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	460d      	mov	r5, r1
 8004466:	b09d      	sub	sp, #116	; 0x74
 8004468:	4614      	mov	r4, r2
 800446a:	4698      	mov	r8, r3
 800446c:	4606      	mov	r6, r0
 800446e:	b118      	cbz	r0, 8004478 <_vfiprintf_r+0x18>
 8004470:	6a03      	ldr	r3, [r0, #32]
 8004472:	b90b      	cbnz	r3, 8004478 <_vfiprintf_r+0x18>
 8004474:	f7ff fce0 	bl	8003e38 <__sinit>
 8004478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800447a:	07d9      	lsls	r1, r3, #31
 800447c:	d405      	bmi.n	800448a <_vfiprintf_r+0x2a>
 800447e:	89ab      	ldrh	r3, [r5, #12]
 8004480:	059a      	lsls	r2, r3, #22
 8004482:	d402      	bmi.n	800448a <_vfiprintf_r+0x2a>
 8004484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004486:	f7ff fdca 	bl	800401e <__retarget_lock_acquire_recursive>
 800448a:	89ab      	ldrh	r3, [r5, #12]
 800448c:	071b      	lsls	r3, r3, #28
 800448e:	d501      	bpl.n	8004494 <_vfiprintf_r+0x34>
 8004490:	692b      	ldr	r3, [r5, #16]
 8004492:	b99b      	cbnz	r3, 80044bc <_vfiprintf_r+0x5c>
 8004494:	4629      	mov	r1, r5
 8004496:	4630      	mov	r0, r6
 8004498:	f000 faca 	bl	8004a30 <__swsetup_r>
 800449c:	b170      	cbz	r0, 80044bc <_vfiprintf_r+0x5c>
 800449e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044a0:	07dc      	lsls	r4, r3, #31
 80044a2:	d504      	bpl.n	80044ae <_vfiprintf_r+0x4e>
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	b01d      	add	sp, #116	; 0x74
 80044aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ae:	89ab      	ldrh	r3, [r5, #12]
 80044b0:	0598      	lsls	r0, r3, #22
 80044b2:	d4f7      	bmi.n	80044a4 <_vfiprintf_r+0x44>
 80044b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044b6:	f7ff fdb3 	bl	8004020 <__retarget_lock_release_recursive>
 80044ba:	e7f3      	b.n	80044a4 <_vfiprintf_r+0x44>
 80044bc:	2300      	movs	r3, #0
 80044be:	9309      	str	r3, [sp, #36]	; 0x24
 80044c0:	2320      	movs	r3, #32
 80044c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ca:	2330      	movs	r3, #48	; 0x30
 80044cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004680 <_vfiprintf_r+0x220>
 80044d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044d4:	f04f 0901 	mov.w	r9, #1
 80044d8:	4623      	mov	r3, r4
 80044da:	469a      	mov	sl, r3
 80044dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044e0:	b10a      	cbz	r2, 80044e6 <_vfiprintf_r+0x86>
 80044e2:	2a25      	cmp	r2, #37	; 0x25
 80044e4:	d1f9      	bne.n	80044da <_vfiprintf_r+0x7a>
 80044e6:	ebba 0b04 	subs.w	fp, sl, r4
 80044ea:	d00b      	beq.n	8004504 <_vfiprintf_r+0xa4>
 80044ec:	465b      	mov	r3, fp
 80044ee:	4622      	mov	r2, r4
 80044f0:	4629      	mov	r1, r5
 80044f2:	4630      	mov	r0, r6
 80044f4:	f7ff ffa2 	bl	800443c <__sfputs_r>
 80044f8:	3001      	adds	r0, #1
 80044fa:	f000 80a9 	beq.w	8004650 <_vfiprintf_r+0x1f0>
 80044fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004500:	445a      	add	r2, fp
 8004502:	9209      	str	r2, [sp, #36]	; 0x24
 8004504:	f89a 3000 	ldrb.w	r3, [sl]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80a1 	beq.w	8004650 <_vfiprintf_r+0x1f0>
 800450e:	2300      	movs	r3, #0
 8004510:	f04f 32ff 	mov.w	r2, #4294967295
 8004514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004518:	f10a 0a01 	add.w	sl, sl, #1
 800451c:	9304      	str	r3, [sp, #16]
 800451e:	9307      	str	r3, [sp, #28]
 8004520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004524:	931a      	str	r3, [sp, #104]	; 0x68
 8004526:	4654      	mov	r4, sl
 8004528:	2205      	movs	r2, #5
 800452a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800452e:	4854      	ldr	r0, [pc, #336]	; (8004680 <_vfiprintf_r+0x220>)
 8004530:	f7fb fe6e 	bl	8000210 <memchr>
 8004534:	9a04      	ldr	r2, [sp, #16]
 8004536:	b9d8      	cbnz	r0, 8004570 <_vfiprintf_r+0x110>
 8004538:	06d1      	lsls	r1, r2, #27
 800453a:	bf44      	itt	mi
 800453c:	2320      	movmi	r3, #32
 800453e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004542:	0713      	lsls	r3, r2, #28
 8004544:	bf44      	itt	mi
 8004546:	232b      	movmi	r3, #43	; 0x2b
 8004548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800454c:	f89a 3000 	ldrb.w	r3, [sl]
 8004550:	2b2a      	cmp	r3, #42	; 0x2a
 8004552:	d015      	beq.n	8004580 <_vfiprintf_r+0x120>
 8004554:	9a07      	ldr	r2, [sp, #28]
 8004556:	4654      	mov	r4, sl
 8004558:	2000      	movs	r0, #0
 800455a:	f04f 0c0a 	mov.w	ip, #10
 800455e:	4621      	mov	r1, r4
 8004560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004564:	3b30      	subs	r3, #48	; 0x30
 8004566:	2b09      	cmp	r3, #9
 8004568:	d94d      	bls.n	8004606 <_vfiprintf_r+0x1a6>
 800456a:	b1b0      	cbz	r0, 800459a <_vfiprintf_r+0x13a>
 800456c:	9207      	str	r2, [sp, #28]
 800456e:	e014      	b.n	800459a <_vfiprintf_r+0x13a>
 8004570:	eba0 0308 	sub.w	r3, r0, r8
 8004574:	fa09 f303 	lsl.w	r3, r9, r3
 8004578:	4313      	orrs	r3, r2
 800457a:	9304      	str	r3, [sp, #16]
 800457c:	46a2      	mov	sl, r4
 800457e:	e7d2      	b.n	8004526 <_vfiprintf_r+0xc6>
 8004580:	9b03      	ldr	r3, [sp, #12]
 8004582:	1d19      	adds	r1, r3, #4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	9103      	str	r1, [sp, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	bfbb      	ittet	lt
 800458c:	425b      	neglt	r3, r3
 800458e:	f042 0202 	orrlt.w	r2, r2, #2
 8004592:	9307      	strge	r3, [sp, #28]
 8004594:	9307      	strlt	r3, [sp, #28]
 8004596:	bfb8      	it	lt
 8004598:	9204      	strlt	r2, [sp, #16]
 800459a:	7823      	ldrb	r3, [r4, #0]
 800459c:	2b2e      	cmp	r3, #46	; 0x2e
 800459e:	d10c      	bne.n	80045ba <_vfiprintf_r+0x15a>
 80045a0:	7863      	ldrb	r3, [r4, #1]
 80045a2:	2b2a      	cmp	r3, #42	; 0x2a
 80045a4:	d134      	bne.n	8004610 <_vfiprintf_r+0x1b0>
 80045a6:	9b03      	ldr	r3, [sp, #12]
 80045a8:	1d1a      	adds	r2, r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	9203      	str	r2, [sp, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bfb8      	it	lt
 80045b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80045b6:	3402      	adds	r4, #2
 80045b8:	9305      	str	r3, [sp, #20]
 80045ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004690 <_vfiprintf_r+0x230>
 80045be:	7821      	ldrb	r1, [r4, #0]
 80045c0:	2203      	movs	r2, #3
 80045c2:	4650      	mov	r0, sl
 80045c4:	f7fb fe24 	bl	8000210 <memchr>
 80045c8:	b138      	cbz	r0, 80045da <_vfiprintf_r+0x17a>
 80045ca:	9b04      	ldr	r3, [sp, #16]
 80045cc:	eba0 000a 	sub.w	r0, r0, sl
 80045d0:	2240      	movs	r2, #64	; 0x40
 80045d2:	4082      	lsls	r2, r0
 80045d4:	4313      	orrs	r3, r2
 80045d6:	3401      	adds	r4, #1
 80045d8:	9304      	str	r3, [sp, #16]
 80045da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045de:	4829      	ldr	r0, [pc, #164]	; (8004684 <_vfiprintf_r+0x224>)
 80045e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045e4:	2206      	movs	r2, #6
 80045e6:	f7fb fe13 	bl	8000210 <memchr>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	d03f      	beq.n	800466e <_vfiprintf_r+0x20e>
 80045ee:	4b26      	ldr	r3, [pc, #152]	; (8004688 <_vfiprintf_r+0x228>)
 80045f0:	bb1b      	cbnz	r3, 800463a <_vfiprintf_r+0x1da>
 80045f2:	9b03      	ldr	r3, [sp, #12]
 80045f4:	3307      	adds	r3, #7
 80045f6:	f023 0307 	bic.w	r3, r3, #7
 80045fa:	3308      	adds	r3, #8
 80045fc:	9303      	str	r3, [sp, #12]
 80045fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004600:	443b      	add	r3, r7
 8004602:	9309      	str	r3, [sp, #36]	; 0x24
 8004604:	e768      	b.n	80044d8 <_vfiprintf_r+0x78>
 8004606:	fb0c 3202 	mla	r2, ip, r2, r3
 800460a:	460c      	mov	r4, r1
 800460c:	2001      	movs	r0, #1
 800460e:	e7a6      	b.n	800455e <_vfiprintf_r+0xfe>
 8004610:	2300      	movs	r3, #0
 8004612:	3401      	adds	r4, #1
 8004614:	9305      	str	r3, [sp, #20]
 8004616:	4619      	mov	r1, r3
 8004618:	f04f 0c0a 	mov.w	ip, #10
 800461c:	4620      	mov	r0, r4
 800461e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004622:	3a30      	subs	r2, #48	; 0x30
 8004624:	2a09      	cmp	r2, #9
 8004626:	d903      	bls.n	8004630 <_vfiprintf_r+0x1d0>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0c6      	beq.n	80045ba <_vfiprintf_r+0x15a>
 800462c:	9105      	str	r1, [sp, #20]
 800462e:	e7c4      	b.n	80045ba <_vfiprintf_r+0x15a>
 8004630:	fb0c 2101 	mla	r1, ip, r1, r2
 8004634:	4604      	mov	r4, r0
 8004636:	2301      	movs	r3, #1
 8004638:	e7f0      	b.n	800461c <_vfiprintf_r+0x1bc>
 800463a:	ab03      	add	r3, sp, #12
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	462a      	mov	r2, r5
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <_vfiprintf_r+0x22c>)
 8004642:	a904      	add	r1, sp, #16
 8004644:	4630      	mov	r0, r6
 8004646:	f3af 8000 	nop.w
 800464a:	4607      	mov	r7, r0
 800464c:	1c78      	adds	r0, r7, #1
 800464e:	d1d6      	bne.n	80045fe <_vfiprintf_r+0x19e>
 8004650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004652:	07d9      	lsls	r1, r3, #31
 8004654:	d405      	bmi.n	8004662 <_vfiprintf_r+0x202>
 8004656:	89ab      	ldrh	r3, [r5, #12]
 8004658:	059a      	lsls	r2, r3, #22
 800465a:	d402      	bmi.n	8004662 <_vfiprintf_r+0x202>
 800465c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800465e:	f7ff fcdf 	bl	8004020 <__retarget_lock_release_recursive>
 8004662:	89ab      	ldrh	r3, [r5, #12]
 8004664:	065b      	lsls	r3, r3, #25
 8004666:	f53f af1d 	bmi.w	80044a4 <_vfiprintf_r+0x44>
 800466a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800466c:	e71c      	b.n	80044a8 <_vfiprintf_r+0x48>
 800466e:	ab03      	add	r3, sp, #12
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	462a      	mov	r2, r5
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <_vfiprintf_r+0x22c>)
 8004676:	a904      	add	r1, sp, #16
 8004678:	4630      	mov	r0, r6
 800467a:	f000 f879 	bl	8004770 <_printf_i>
 800467e:	e7e4      	b.n	800464a <_vfiprintf_r+0x1ea>
 8004680:	08004d4b 	.word	0x08004d4b
 8004684:	08004d55 	.word	0x08004d55
 8004688:	00000000 	.word	0x00000000
 800468c:	0800443d 	.word	0x0800443d
 8004690:	08004d51 	.word	0x08004d51

08004694 <_printf_common>:
 8004694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	4616      	mov	r6, r2
 800469a:	4699      	mov	r9, r3
 800469c:	688a      	ldr	r2, [r1, #8]
 800469e:	690b      	ldr	r3, [r1, #16]
 80046a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046a4:	4293      	cmp	r3, r2
 80046a6:	bfb8      	it	lt
 80046a8:	4613      	movlt	r3, r2
 80046aa:	6033      	str	r3, [r6, #0]
 80046ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046b0:	4607      	mov	r7, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	b10a      	cbz	r2, 80046ba <_printf_common+0x26>
 80046b6:	3301      	adds	r3, #1
 80046b8:	6033      	str	r3, [r6, #0]
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	0699      	lsls	r1, r3, #26
 80046be:	bf42      	ittt	mi
 80046c0:	6833      	ldrmi	r3, [r6, #0]
 80046c2:	3302      	addmi	r3, #2
 80046c4:	6033      	strmi	r3, [r6, #0]
 80046c6:	6825      	ldr	r5, [r4, #0]
 80046c8:	f015 0506 	ands.w	r5, r5, #6
 80046cc:	d106      	bne.n	80046dc <_printf_common+0x48>
 80046ce:	f104 0a19 	add.w	sl, r4, #25
 80046d2:	68e3      	ldr	r3, [r4, #12]
 80046d4:	6832      	ldr	r2, [r6, #0]
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	42ab      	cmp	r3, r5
 80046da:	dc26      	bgt.n	800472a <_printf_common+0x96>
 80046dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046e0:	1e13      	subs	r3, r2, #0
 80046e2:	6822      	ldr	r2, [r4, #0]
 80046e4:	bf18      	it	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	0692      	lsls	r2, r2, #26
 80046ea:	d42b      	bmi.n	8004744 <_printf_common+0xb0>
 80046ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046f0:	4649      	mov	r1, r9
 80046f2:	4638      	mov	r0, r7
 80046f4:	47c0      	blx	r8
 80046f6:	3001      	adds	r0, #1
 80046f8:	d01e      	beq.n	8004738 <_printf_common+0xa4>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	6922      	ldr	r2, [r4, #16]
 80046fe:	f003 0306 	and.w	r3, r3, #6
 8004702:	2b04      	cmp	r3, #4
 8004704:	bf02      	ittt	eq
 8004706:	68e5      	ldreq	r5, [r4, #12]
 8004708:	6833      	ldreq	r3, [r6, #0]
 800470a:	1aed      	subeq	r5, r5, r3
 800470c:	68a3      	ldr	r3, [r4, #8]
 800470e:	bf0c      	ite	eq
 8004710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004714:	2500      	movne	r5, #0
 8004716:	4293      	cmp	r3, r2
 8004718:	bfc4      	itt	gt
 800471a:	1a9b      	subgt	r3, r3, r2
 800471c:	18ed      	addgt	r5, r5, r3
 800471e:	2600      	movs	r6, #0
 8004720:	341a      	adds	r4, #26
 8004722:	42b5      	cmp	r5, r6
 8004724:	d11a      	bne.n	800475c <_printf_common+0xc8>
 8004726:	2000      	movs	r0, #0
 8004728:	e008      	b.n	800473c <_printf_common+0xa8>
 800472a:	2301      	movs	r3, #1
 800472c:	4652      	mov	r2, sl
 800472e:	4649      	mov	r1, r9
 8004730:	4638      	mov	r0, r7
 8004732:	47c0      	blx	r8
 8004734:	3001      	adds	r0, #1
 8004736:	d103      	bne.n	8004740 <_printf_common+0xac>
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004740:	3501      	adds	r5, #1
 8004742:	e7c6      	b.n	80046d2 <_printf_common+0x3e>
 8004744:	18e1      	adds	r1, r4, r3
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	2030      	movs	r0, #48	; 0x30
 800474a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800474e:	4422      	add	r2, r4
 8004750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004758:	3302      	adds	r3, #2
 800475a:	e7c7      	b.n	80046ec <_printf_common+0x58>
 800475c:	2301      	movs	r3, #1
 800475e:	4622      	mov	r2, r4
 8004760:	4649      	mov	r1, r9
 8004762:	4638      	mov	r0, r7
 8004764:	47c0      	blx	r8
 8004766:	3001      	adds	r0, #1
 8004768:	d0e6      	beq.n	8004738 <_printf_common+0xa4>
 800476a:	3601      	adds	r6, #1
 800476c:	e7d9      	b.n	8004722 <_printf_common+0x8e>
	...

08004770 <_printf_i>:
 8004770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	7e0f      	ldrb	r7, [r1, #24]
 8004776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004778:	2f78      	cmp	r7, #120	; 0x78
 800477a:	4691      	mov	r9, r2
 800477c:	4680      	mov	r8, r0
 800477e:	460c      	mov	r4, r1
 8004780:	469a      	mov	sl, r3
 8004782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004786:	d807      	bhi.n	8004798 <_printf_i+0x28>
 8004788:	2f62      	cmp	r7, #98	; 0x62
 800478a:	d80a      	bhi.n	80047a2 <_printf_i+0x32>
 800478c:	2f00      	cmp	r7, #0
 800478e:	f000 80d4 	beq.w	800493a <_printf_i+0x1ca>
 8004792:	2f58      	cmp	r7, #88	; 0x58
 8004794:	f000 80c0 	beq.w	8004918 <_printf_i+0x1a8>
 8004798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800479c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047a0:	e03a      	b.n	8004818 <_printf_i+0xa8>
 80047a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047a6:	2b15      	cmp	r3, #21
 80047a8:	d8f6      	bhi.n	8004798 <_printf_i+0x28>
 80047aa:	a101      	add	r1, pc, #4	; (adr r1, 80047b0 <_printf_i+0x40>)
 80047ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047b0:	08004809 	.word	0x08004809
 80047b4:	0800481d 	.word	0x0800481d
 80047b8:	08004799 	.word	0x08004799
 80047bc:	08004799 	.word	0x08004799
 80047c0:	08004799 	.word	0x08004799
 80047c4:	08004799 	.word	0x08004799
 80047c8:	0800481d 	.word	0x0800481d
 80047cc:	08004799 	.word	0x08004799
 80047d0:	08004799 	.word	0x08004799
 80047d4:	08004799 	.word	0x08004799
 80047d8:	08004799 	.word	0x08004799
 80047dc:	08004921 	.word	0x08004921
 80047e0:	08004849 	.word	0x08004849
 80047e4:	080048db 	.word	0x080048db
 80047e8:	08004799 	.word	0x08004799
 80047ec:	08004799 	.word	0x08004799
 80047f0:	08004943 	.word	0x08004943
 80047f4:	08004799 	.word	0x08004799
 80047f8:	08004849 	.word	0x08004849
 80047fc:	08004799 	.word	0x08004799
 8004800:	08004799 	.word	0x08004799
 8004804:	080048e3 	.word	0x080048e3
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	1d1a      	adds	r2, r3, #4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	602a      	str	r2, [r5, #0]
 8004810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004818:	2301      	movs	r3, #1
 800481a:	e09f      	b.n	800495c <_printf_i+0x1ec>
 800481c:	6820      	ldr	r0, [r4, #0]
 800481e:	682b      	ldr	r3, [r5, #0]
 8004820:	0607      	lsls	r7, r0, #24
 8004822:	f103 0104 	add.w	r1, r3, #4
 8004826:	6029      	str	r1, [r5, #0]
 8004828:	d501      	bpl.n	800482e <_printf_i+0xbe>
 800482a:	681e      	ldr	r6, [r3, #0]
 800482c:	e003      	b.n	8004836 <_printf_i+0xc6>
 800482e:	0646      	lsls	r6, r0, #25
 8004830:	d5fb      	bpl.n	800482a <_printf_i+0xba>
 8004832:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004836:	2e00      	cmp	r6, #0
 8004838:	da03      	bge.n	8004842 <_printf_i+0xd2>
 800483a:	232d      	movs	r3, #45	; 0x2d
 800483c:	4276      	negs	r6, r6
 800483e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004842:	485a      	ldr	r0, [pc, #360]	; (80049ac <_printf_i+0x23c>)
 8004844:	230a      	movs	r3, #10
 8004846:	e012      	b.n	800486e <_printf_i+0xfe>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	6820      	ldr	r0, [r4, #0]
 800484c:	1d19      	adds	r1, r3, #4
 800484e:	6029      	str	r1, [r5, #0]
 8004850:	0605      	lsls	r5, r0, #24
 8004852:	d501      	bpl.n	8004858 <_printf_i+0xe8>
 8004854:	681e      	ldr	r6, [r3, #0]
 8004856:	e002      	b.n	800485e <_printf_i+0xee>
 8004858:	0641      	lsls	r1, r0, #25
 800485a:	d5fb      	bpl.n	8004854 <_printf_i+0xe4>
 800485c:	881e      	ldrh	r6, [r3, #0]
 800485e:	4853      	ldr	r0, [pc, #332]	; (80049ac <_printf_i+0x23c>)
 8004860:	2f6f      	cmp	r7, #111	; 0x6f
 8004862:	bf0c      	ite	eq
 8004864:	2308      	moveq	r3, #8
 8004866:	230a      	movne	r3, #10
 8004868:	2100      	movs	r1, #0
 800486a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800486e:	6865      	ldr	r5, [r4, #4]
 8004870:	60a5      	str	r5, [r4, #8]
 8004872:	2d00      	cmp	r5, #0
 8004874:	bfa2      	ittt	ge
 8004876:	6821      	ldrge	r1, [r4, #0]
 8004878:	f021 0104 	bicge.w	r1, r1, #4
 800487c:	6021      	strge	r1, [r4, #0]
 800487e:	b90e      	cbnz	r6, 8004884 <_printf_i+0x114>
 8004880:	2d00      	cmp	r5, #0
 8004882:	d04b      	beq.n	800491c <_printf_i+0x1ac>
 8004884:	4615      	mov	r5, r2
 8004886:	fbb6 f1f3 	udiv	r1, r6, r3
 800488a:	fb03 6711 	mls	r7, r3, r1, r6
 800488e:	5dc7      	ldrb	r7, [r0, r7]
 8004890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004894:	4637      	mov	r7, r6
 8004896:	42bb      	cmp	r3, r7
 8004898:	460e      	mov	r6, r1
 800489a:	d9f4      	bls.n	8004886 <_printf_i+0x116>
 800489c:	2b08      	cmp	r3, #8
 800489e:	d10b      	bne.n	80048b8 <_printf_i+0x148>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	07de      	lsls	r6, r3, #31
 80048a4:	d508      	bpl.n	80048b8 <_printf_i+0x148>
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	6861      	ldr	r1, [r4, #4]
 80048aa:	4299      	cmp	r1, r3
 80048ac:	bfde      	ittt	le
 80048ae:	2330      	movle	r3, #48	; 0x30
 80048b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048b8:	1b52      	subs	r2, r2, r5
 80048ba:	6122      	str	r2, [r4, #16]
 80048bc:	f8cd a000 	str.w	sl, [sp]
 80048c0:	464b      	mov	r3, r9
 80048c2:	aa03      	add	r2, sp, #12
 80048c4:	4621      	mov	r1, r4
 80048c6:	4640      	mov	r0, r8
 80048c8:	f7ff fee4 	bl	8004694 <_printf_common>
 80048cc:	3001      	adds	r0, #1
 80048ce:	d14a      	bne.n	8004966 <_printf_i+0x1f6>
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	b004      	add	sp, #16
 80048d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	f043 0320 	orr.w	r3, r3, #32
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	4833      	ldr	r0, [pc, #204]	; (80049b0 <_printf_i+0x240>)
 80048e4:	2778      	movs	r7, #120	; 0x78
 80048e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	6829      	ldr	r1, [r5, #0]
 80048ee:	061f      	lsls	r7, r3, #24
 80048f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80048f4:	d402      	bmi.n	80048fc <_printf_i+0x18c>
 80048f6:	065f      	lsls	r7, r3, #25
 80048f8:	bf48      	it	mi
 80048fa:	b2b6      	uxthmi	r6, r6
 80048fc:	07df      	lsls	r7, r3, #31
 80048fe:	bf48      	it	mi
 8004900:	f043 0320 	orrmi.w	r3, r3, #32
 8004904:	6029      	str	r1, [r5, #0]
 8004906:	bf48      	it	mi
 8004908:	6023      	strmi	r3, [r4, #0]
 800490a:	b91e      	cbnz	r6, 8004914 <_printf_i+0x1a4>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	f023 0320 	bic.w	r3, r3, #32
 8004912:	6023      	str	r3, [r4, #0]
 8004914:	2310      	movs	r3, #16
 8004916:	e7a7      	b.n	8004868 <_printf_i+0xf8>
 8004918:	4824      	ldr	r0, [pc, #144]	; (80049ac <_printf_i+0x23c>)
 800491a:	e7e4      	b.n	80048e6 <_printf_i+0x176>
 800491c:	4615      	mov	r5, r2
 800491e:	e7bd      	b.n	800489c <_printf_i+0x12c>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	6826      	ldr	r6, [r4, #0]
 8004924:	6961      	ldr	r1, [r4, #20]
 8004926:	1d18      	adds	r0, r3, #4
 8004928:	6028      	str	r0, [r5, #0]
 800492a:	0635      	lsls	r5, r6, #24
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	d501      	bpl.n	8004934 <_printf_i+0x1c4>
 8004930:	6019      	str	r1, [r3, #0]
 8004932:	e002      	b.n	800493a <_printf_i+0x1ca>
 8004934:	0670      	lsls	r0, r6, #25
 8004936:	d5fb      	bpl.n	8004930 <_printf_i+0x1c0>
 8004938:	8019      	strh	r1, [r3, #0]
 800493a:	2300      	movs	r3, #0
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	4615      	mov	r5, r2
 8004940:	e7bc      	b.n	80048bc <_printf_i+0x14c>
 8004942:	682b      	ldr	r3, [r5, #0]
 8004944:	1d1a      	adds	r2, r3, #4
 8004946:	602a      	str	r2, [r5, #0]
 8004948:	681d      	ldr	r5, [r3, #0]
 800494a:	6862      	ldr	r2, [r4, #4]
 800494c:	2100      	movs	r1, #0
 800494e:	4628      	mov	r0, r5
 8004950:	f7fb fc5e 	bl	8000210 <memchr>
 8004954:	b108      	cbz	r0, 800495a <_printf_i+0x1ea>
 8004956:	1b40      	subs	r0, r0, r5
 8004958:	6060      	str	r0, [r4, #4]
 800495a:	6863      	ldr	r3, [r4, #4]
 800495c:	6123      	str	r3, [r4, #16]
 800495e:	2300      	movs	r3, #0
 8004960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004964:	e7aa      	b.n	80048bc <_printf_i+0x14c>
 8004966:	6923      	ldr	r3, [r4, #16]
 8004968:	462a      	mov	r2, r5
 800496a:	4649      	mov	r1, r9
 800496c:	4640      	mov	r0, r8
 800496e:	47d0      	blx	sl
 8004970:	3001      	adds	r0, #1
 8004972:	d0ad      	beq.n	80048d0 <_printf_i+0x160>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	079b      	lsls	r3, r3, #30
 8004978:	d413      	bmi.n	80049a2 <_printf_i+0x232>
 800497a:	68e0      	ldr	r0, [r4, #12]
 800497c:	9b03      	ldr	r3, [sp, #12]
 800497e:	4298      	cmp	r0, r3
 8004980:	bfb8      	it	lt
 8004982:	4618      	movlt	r0, r3
 8004984:	e7a6      	b.n	80048d4 <_printf_i+0x164>
 8004986:	2301      	movs	r3, #1
 8004988:	4632      	mov	r2, r6
 800498a:	4649      	mov	r1, r9
 800498c:	4640      	mov	r0, r8
 800498e:	47d0      	blx	sl
 8004990:	3001      	adds	r0, #1
 8004992:	d09d      	beq.n	80048d0 <_printf_i+0x160>
 8004994:	3501      	adds	r5, #1
 8004996:	68e3      	ldr	r3, [r4, #12]
 8004998:	9903      	ldr	r1, [sp, #12]
 800499a:	1a5b      	subs	r3, r3, r1
 800499c:	42ab      	cmp	r3, r5
 800499e:	dcf2      	bgt.n	8004986 <_printf_i+0x216>
 80049a0:	e7eb      	b.n	800497a <_printf_i+0x20a>
 80049a2:	2500      	movs	r5, #0
 80049a4:	f104 0619 	add.w	r6, r4, #25
 80049a8:	e7f5      	b.n	8004996 <_printf_i+0x226>
 80049aa:	bf00      	nop
 80049ac:	08004d5c 	.word	0x08004d5c
 80049b0:	08004d6d 	.word	0x08004d6d

080049b4 <__swbuf_r>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	460e      	mov	r6, r1
 80049b8:	4614      	mov	r4, r2
 80049ba:	4605      	mov	r5, r0
 80049bc:	b118      	cbz	r0, 80049c6 <__swbuf_r+0x12>
 80049be:	6a03      	ldr	r3, [r0, #32]
 80049c0:	b90b      	cbnz	r3, 80049c6 <__swbuf_r+0x12>
 80049c2:	f7ff fa39 	bl	8003e38 <__sinit>
 80049c6:	69a3      	ldr	r3, [r4, #24]
 80049c8:	60a3      	str	r3, [r4, #8]
 80049ca:	89a3      	ldrh	r3, [r4, #12]
 80049cc:	071a      	lsls	r2, r3, #28
 80049ce:	d525      	bpl.n	8004a1c <__swbuf_r+0x68>
 80049d0:	6923      	ldr	r3, [r4, #16]
 80049d2:	b31b      	cbz	r3, 8004a1c <__swbuf_r+0x68>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	6922      	ldr	r2, [r4, #16]
 80049d8:	1a98      	subs	r0, r3, r2
 80049da:	6963      	ldr	r3, [r4, #20]
 80049dc:	b2f6      	uxtb	r6, r6
 80049de:	4283      	cmp	r3, r0
 80049e0:	4637      	mov	r7, r6
 80049e2:	dc04      	bgt.n	80049ee <__swbuf_r+0x3a>
 80049e4:	4621      	mov	r1, r4
 80049e6:	4628      	mov	r0, r5
 80049e8:	f7ff fcc0 	bl	800436c <_fflush_r>
 80049ec:	b9e0      	cbnz	r0, 8004a28 <__swbuf_r+0x74>
 80049ee:	68a3      	ldr	r3, [r4, #8]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	60a3      	str	r3, [r4, #8]
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	6022      	str	r2, [r4, #0]
 80049fa:	701e      	strb	r6, [r3, #0]
 80049fc:	6962      	ldr	r2, [r4, #20]
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d004      	beq.n	8004a0e <__swbuf_r+0x5a>
 8004a04:	89a3      	ldrh	r3, [r4, #12]
 8004a06:	07db      	lsls	r3, r3, #31
 8004a08:	d506      	bpl.n	8004a18 <__swbuf_r+0x64>
 8004a0a:	2e0a      	cmp	r6, #10
 8004a0c:	d104      	bne.n	8004a18 <__swbuf_r+0x64>
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4628      	mov	r0, r5
 8004a12:	f7ff fcab 	bl	800436c <_fflush_r>
 8004a16:	b938      	cbnz	r0, 8004a28 <__swbuf_r+0x74>
 8004a18:	4638      	mov	r0, r7
 8004a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f000 f806 	bl	8004a30 <__swsetup_r>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d0d5      	beq.n	80049d4 <__swbuf_r+0x20>
 8004a28:	f04f 37ff 	mov.w	r7, #4294967295
 8004a2c:	e7f4      	b.n	8004a18 <__swbuf_r+0x64>
	...

08004a30 <__swsetup_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4b2a      	ldr	r3, [pc, #168]	; (8004adc <__swsetup_r+0xac>)
 8004a34:	4605      	mov	r5, r0
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	460c      	mov	r4, r1
 8004a3a:	b118      	cbz	r0, 8004a44 <__swsetup_r+0x14>
 8004a3c:	6a03      	ldr	r3, [r0, #32]
 8004a3e:	b90b      	cbnz	r3, 8004a44 <__swsetup_r+0x14>
 8004a40:	f7ff f9fa 	bl	8003e38 <__sinit>
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a4a:	0718      	lsls	r0, r3, #28
 8004a4c:	d422      	bmi.n	8004a94 <__swsetup_r+0x64>
 8004a4e:	06d9      	lsls	r1, r3, #27
 8004a50:	d407      	bmi.n	8004a62 <__swsetup_r+0x32>
 8004a52:	2309      	movs	r3, #9
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a60:	e034      	b.n	8004acc <__swsetup_r+0x9c>
 8004a62:	0758      	lsls	r0, r3, #29
 8004a64:	d512      	bpl.n	8004a8c <__swsetup_r+0x5c>
 8004a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a68:	b141      	cbz	r1, 8004a7c <__swsetup_r+0x4c>
 8004a6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a6e:	4299      	cmp	r1, r3
 8004a70:	d002      	beq.n	8004a78 <__swsetup_r+0x48>
 8004a72:	4628      	mov	r0, r5
 8004a74:	f7ff faf4 	bl	8004060 <_free_r>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	6363      	str	r3, [r4, #52]	; 0x34
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	2300      	movs	r3, #0
 8004a86:	6063      	str	r3, [r4, #4]
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	6023      	str	r3, [r4, #0]
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	f043 0308 	orr.w	r3, r3, #8
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	b94b      	cbnz	r3, 8004aac <__swsetup_r+0x7c>
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa2:	d003      	beq.n	8004aac <__swsetup_r+0x7c>
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f000 f884 	bl	8004bb4 <__smakebuf_r>
 8004aac:	89a0      	ldrh	r0, [r4, #12]
 8004aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ab2:	f010 0301 	ands.w	r3, r0, #1
 8004ab6:	d00a      	beq.n	8004ace <__swsetup_r+0x9e>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60a3      	str	r3, [r4, #8]
 8004abc:	6963      	ldr	r3, [r4, #20]
 8004abe:	425b      	negs	r3, r3
 8004ac0:	61a3      	str	r3, [r4, #24]
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	b943      	cbnz	r3, 8004ad8 <__swsetup_r+0xa8>
 8004ac6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004aca:	d1c4      	bne.n	8004a56 <__swsetup_r+0x26>
 8004acc:	bd38      	pop	{r3, r4, r5, pc}
 8004ace:	0781      	lsls	r1, r0, #30
 8004ad0:	bf58      	it	pl
 8004ad2:	6963      	ldrpl	r3, [r4, #20]
 8004ad4:	60a3      	str	r3, [r4, #8]
 8004ad6:	e7f4      	b.n	8004ac2 <__swsetup_r+0x92>
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e7f7      	b.n	8004acc <__swsetup_r+0x9c>
 8004adc:	20000064 	.word	0x20000064

08004ae0 <_raise_r>:
 8004ae0:	291f      	cmp	r1, #31
 8004ae2:	b538      	push	{r3, r4, r5, lr}
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	460d      	mov	r5, r1
 8004ae8:	d904      	bls.n	8004af4 <_raise_r+0x14>
 8004aea:	2316      	movs	r3, #22
 8004aec:	6003      	str	r3, [r0, #0]
 8004aee:	f04f 30ff 	mov.w	r0, #4294967295
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004af6:	b112      	cbz	r2, 8004afe <_raise_r+0x1e>
 8004af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004afc:	b94b      	cbnz	r3, 8004b12 <_raise_r+0x32>
 8004afe:	4620      	mov	r0, r4
 8004b00:	f000 f830 	bl	8004b64 <_getpid_r>
 8004b04:	462a      	mov	r2, r5
 8004b06:	4601      	mov	r1, r0
 8004b08:	4620      	mov	r0, r4
 8004b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b0e:	f000 b817 	b.w	8004b40 <_kill_r>
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d00a      	beq.n	8004b2c <_raise_r+0x4c>
 8004b16:	1c59      	adds	r1, r3, #1
 8004b18:	d103      	bne.n	8004b22 <_raise_r+0x42>
 8004b1a:	2316      	movs	r3, #22
 8004b1c:	6003      	str	r3, [r0, #0]
 8004b1e:	2001      	movs	r0, #1
 8004b20:	e7e7      	b.n	8004af2 <_raise_r+0x12>
 8004b22:	2400      	movs	r4, #0
 8004b24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b28:	4628      	mov	r0, r5
 8004b2a:	4798      	blx	r3
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	e7e0      	b.n	8004af2 <_raise_r+0x12>

08004b30 <raise>:
 8004b30:	4b02      	ldr	r3, [pc, #8]	; (8004b3c <raise+0xc>)
 8004b32:	4601      	mov	r1, r0
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	f7ff bfd3 	b.w	8004ae0 <_raise_r>
 8004b3a:	bf00      	nop
 8004b3c:	20000064 	.word	0x20000064

08004b40 <_kill_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4d07      	ldr	r5, [pc, #28]	; (8004b60 <_kill_r+0x20>)
 8004b44:	2300      	movs	r3, #0
 8004b46:	4604      	mov	r4, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	602b      	str	r3, [r5, #0]
 8004b4e:	f7fc fbfd 	bl	800134c <_kill>
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	d102      	bne.n	8004b5c <_kill_r+0x1c>
 8004b56:	682b      	ldr	r3, [r5, #0]
 8004b58:	b103      	cbz	r3, 8004b5c <_kill_r+0x1c>
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000348 	.word	0x20000348

08004b64 <_getpid_r>:
 8004b64:	f7fc bbea 	b.w	800133c <_getpid>

08004b68 <__swhatbuf_r>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b70:	2900      	cmp	r1, #0
 8004b72:	b096      	sub	sp, #88	; 0x58
 8004b74:	4615      	mov	r5, r2
 8004b76:	461e      	mov	r6, r3
 8004b78:	da0d      	bge.n	8004b96 <__swhatbuf_r+0x2e>
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b80:	f04f 0100 	mov.w	r1, #0
 8004b84:	bf0c      	ite	eq
 8004b86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b8a:	2340      	movne	r3, #64	; 0x40
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	6031      	str	r1, [r6, #0]
 8004b90:	602b      	str	r3, [r5, #0]
 8004b92:	b016      	add	sp, #88	; 0x58
 8004b94:	bd70      	pop	{r4, r5, r6, pc}
 8004b96:	466a      	mov	r2, sp
 8004b98:	f000 f848 	bl	8004c2c <_fstat_r>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	dbec      	blt.n	8004b7a <__swhatbuf_r+0x12>
 8004ba0:	9901      	ldr	r1, [sp, #4]
 8004ba2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004ba6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004baa:	4259      	negs	r1, r3
 8004bac:	4159      	adcs	r1, r3
 8004bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb2:	e7eb      	b.n	8004b8c <__swhatbuf_r+0x24>

08004bb4 <__smakebuf_r>:
 8004bb4:	898b      	ldrh	r3, [r1, #12]
 8004bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bb8:	079d      	lsls	r5, r3, #30
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	d507      	bpl.n	8004bd0 <__smakebuf_r+0x1c>
 8004bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	6123      	str	r3, [r4, #16]
 8004bc8:	2301      	movs	r3, #1
 8004bca:	6163      	str	r3, [r4, #20]
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	ab01      	add	r3, sp, #4
 8004bd2:	466a      	mov	r2, sp
 8004bd4:	f7ff ffc8 	bl	8004b68 <__swhatbuf_r>
 8004bd8:	9900      	ldr	r1, [sp, #0]
 8004bda:	4605      	mov	r5, r0
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f7ff fab3 	bl	8004148 <_malloc_r>
 8004be2:	b948      	cbnz	r0, 8004bf8 <__smakebuf_r+0x44>
 8004be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be8:	059a      	lsls	r2, r3, #22
 8004bea:	d4ef      	bmi.n	8004bcc <__smakebuf_r+0x18>
 8004bec:	f023 0303 	bic.w	r3, r3, #3
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	e7e3      	b.n	8004bc0 <__smakebuf_r+0xc>
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	6020      	str	r0, [r4, #0]
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c00:	81a3      	strh	r3, [r4, #12]
 8004c02:	9b00      	ldr	r3, [sp, #0]
 8004c04:	6163      	str	r3, [r4, #20]
 8004c06:	9b01      	ldr	r3, [sp, #4]
 8004c08:	6120      	str	r0, [r4, #16]
 8004c0a:	b15b      	cbz	r3, 8004c24 <__smakebuf_r+0x70>
 8004c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c10:	4630      	mov	r0, r6
 8004c12:	f000 f81d 	bl	8004c50 <_isatty_r>
 8004c16:	b128      	cbz	r0, 8004c24 <__smakebuf_r+0x70>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	81a3      	strh	r3, [r4, #12]
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	431d      	orrs	r5, r3
 8004c28:	81a5      	strh	r5, [r4, #12]
 8004c2a:	e7cf      	b.n	8004bcc <__smakebuf_r+0x18>

08004c2c <_fstat_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4d07      	ldr	r5, [pc, #28]	; (8004c4c <_fstat_r+0x20>)
 8004c30:	2300      	movs	r3, #0
 8004c32:	4604      	mov	r4, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	4611      	mov	r1, r2
 8004c38:	602b      	str	r3, [r5, #0]
 8004c3a:	f7fc fbe6 	bl	800140a <_fstat>
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	d102      	bne.n	8004c48 <_fstat_r+0x1c>
 8004c42:	682b      	ldr	r3, [r5, #0]
 8004c44:	b103      	cbz	r3, 8004c48 <_fstat_r+0x1c>
 8004c46:	6023      	str	r3, [r4, #0]
 8004c48:	bd38      	pop	{r3, r4, r5, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000348 	.word	0x20000348

08004c50 <_isatty_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4d06      	ldr	r5, [pc, #24]	; (8004c6c <_isatty_r+0x1c>)
 8004c54:	2300      	movs	r3, #0
 8004c56:	4604      	mov	r4, r0
 8004c58:	4608      	mov	r0, r1
 8004c5a:	602b      	str	r3, [r5, #0]
 8004c5c:	f7fc fbe5 	bl	800142a <_isatty>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_isatty_r+0x1a>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_isatty_r+0x1a>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	20000348 	.word	0x20000348

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
